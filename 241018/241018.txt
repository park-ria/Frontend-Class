API : Application Programming Interface : 상호작용하는 방식

tmdb 사이트 > 넷플릭스 앱 > tmdb API 주소 > axios로 통신

"REST API" 방식으로 앱
개념적인 용어 : URL을 통해서 앱 소통

Method
- GET
- POST
- DELETE 
- PUT

불편한 점 => 새로운 것
1. 모든 요청을 URL // 무한하게 동적경로 생성 무리
2. 항상 메서드 정의를 꼭 챙겨야 함
3. 필요한 데이터 이상으로 너무 과도하게 데이터를 받아온다(Over-fetching)
4. 꼭 필요한 데이터가 누락되어 있는 경우(Under-fetching)

https://graphql.org/

트위터 개발자 https://developer.x.com/en 

우리만의 간단한 서버를 구현 > graphQl > 영화소개 페이지
목업데이터

https://graphql.org/swapi-graphql
> 스타워즈

GET - https://graphql.org/swapi-graphql/allfilms/totalcount


로우데이터를 제공해주는 Server REST API
Apollo Server // REST API 소스를 GraphQL 형식으로 변환시켜줄 수 있도록 도와주는 서버

구현하는 서버에서는 GraphQl



node.js를 기반으로 프로그래밍을 하겠다
npm init : node package manager 초기화
npm init -y

apollographql : API를 직접 설계
> npm i grahpql
> npm i apollo-server

npm i nodemon -D
(-D는 개발자용 디펜던시)

nodemon server.js -> 저장할 때마다 에러가 있는지 없는지 판단

실행명령어 npm run dev

-----------------------------------------

Server 와 client 소통방식
   1. REST API 방식 : tmdb, openWeather
      - OverFetching & UnderFetching 단점 발생

    2. GraphQL 방식
       - 직접 선언형 방식으로 내가 원하는 data를 찾아올 수 있도록 설계하는 방법
       - ApolloServer : 기존의 Server가 Rest API 방식으로 데이터를 제공해주고 
          있는 상태에서  GraphQL 방식으로 데이터를 받아서 재사용하고자 할 때 유용한 서버
       - graphql
       - nodemon

ID : 내장타입(*미리 정의가 되어있는 타입)
> scalar 타입

Mutation 타입 -> post 방식

*GraphQL 50% : client 값을 전달하기 위한 사전 세팅 => 타입을 지정

*GraphQL 타입을 지정, 만약 값이 존재 => null(*error는 아님)

non-nullable 타입

* 실행 => 값 반환 함수

resolver 함수

----------------------------------------------

GraphQL
1) typeDefs
- Query 
- tweet(id:ID!)

2) resolvers
서로 다른 Type 연결하는 방법


----------------------------------

REST APL => GQL

-----------------------

altairgraphql(https://altairgraphql.dev/) -> get started(https://web.altairgraphql.dev/)


Rest API : B/E
GraphQL : F/E

----------------------------------

- 공공데이터 포털 데이터
- 정부기관 : FM
- http VS https

----------------------------------

영화 디비 제공 사이트 -> yts.mx 사이트(https://yts.mx/)
https://yts.mx/api/v2/list_movies.json






