npx create-react-app . --template typescript
npm i styled-components
npm i @types/styled-component -D
npm i react-router-dom
npm i @types/reate-router-dom -D
npm i Atanstack/react-query
npm i recoil
npm i react-hook-form

register : 식별자 이름 정의, 해당 식별자에 포함되는 value 값을 찾아와서 객체의 속성값으로 완성 시켜주는 역할

watch : 실제 사용자가 form 요소를 통해서 입력하고 있는 값을 실시간 모니터링 하는 역할

handleSubmit : form 요소에서 submit 이벤트가 발생되었을 때, value로 입력된 값을 찾아서 특정 변수안에 담아 놓을 수 있도록 해주는 역할(*데이터의 형태는 객체)

formState : 현재 사용자가 form 요소에 입력한 값들에 대한 상태관리, 특히 form 요소 자체적으로 저으이한 유효성 검사에 대한 결과값을 errors라는 키값을 통해 확인 가능

setError: 여러 form들 가운데, 커스터마이징 error를 정의해야하는 경우
defaultValues: 식별자(*필드값) 안에 기본값을 정의하고자 할 때

setValue : form 요소 안에 들어가는 값을 정의

타입단언 : 미리 약속 => 최초 value 값 => 변경 value 값

atom: state 관리를 목적

recoil : 전역 상태 관리 라이브러리
  - atom(함수)
  - useRecoilValue : atom 함수 안에서 관리하고 있는 상태 관리 value를 찾아와주는 역할
  - useSetRecoilState : atom 함수 안에서 관리하고 있는 상태 value를 편집해주는 역할
  - useRecoilState: useRecoilValue + useSetRecoilState 기능을 합쳐놓은 역할 => useState와 비슷

현재까지는 관리해야할 state가 1개면 충분

1. 사용자가 input태그에 입력한 값을 관리하는 정도로만 충분
ToDo, Doing, Done 상태관리 필요
id 값 필요

1) 바꾸고 싶은 컨텐츠가 누구냐? id
2) 바꾸고 싶은 카테고리가 어디냐? click 이벤트
3) 기존에 있었던 카테고리는 어디냐?

1. 애초에는 무의 값
2. 사용자가 값을 입력
- 배열 > 객체
3. 초기값
- 배열 > 객체 > 카테고리 : toDo
4. 업데이트 상황
- 이벤트 실행 : toDo => Doing
- 애초에 값이 저장 state 값이 변경되어야 한다는 사실
5. UI에게 새롭게 데이터가 업데이트가 되었다는 사실을 재알림
- selector
6. enum


카테고리가 정의되는 최초의 타입 string
"TODO" | "DOING" | "DONE" 이렇게 서로소 유니온
다시 마지막엔 string 이럴 땐 as any로 단언해줘도 됨
