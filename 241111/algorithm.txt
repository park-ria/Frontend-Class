안정적으로 데이터를 구현, 유지
신속 데이터를 확장

일반적 = 대중적
대부분의 기업 & 서비스 (B2C)
> 신속 & 정확하게 데이터 확장,제거, 편집

"시간 복잡도" 개념 : 어떤 특정 알고리즘을 활용해서 문제를 해결하는데 걸리는 시간

어떻게 계산?

O(3*n2 + n) = O(n2)
> 가장 시간을 많이 잡아먹는 비효율적인 부부난 직접 비교


프로그래밍 영역 시간을 가장 잡어먹는, 메모리 공간을 가장 비효율적으로 사용할 수 있도록 만들 확률이 가장 높은 요소 <-> 가장 효율적으로 만들 수도 있다

반복문 > 이터러블 객체 : 배열

배열 형태의 자료구조가 어떻게 되어있는가?
혹은 이 배열이라는 자료구조보다 더 효율적인 자료구조를 사용한다면?

선언형? 명령형?

1. 자료구조
2. 알고리즘
3. 시간복잡도
- 빅오메가
- 빅세타
- 빅오
4. 반복문 // 배열
5. 배열
- 장점 : 값 타입 // 사이즈 // 참조타입
- 단점 : 최초 배열 정의 // 수정 편집 매우 비효율 작업
6. 연결리스트
- 장점 : head, next
- 단점 : 최초 값을 찾아오는 것과 무관하게 모든 데이터 참조해야하기 때문에 초기 로딩은 효율적X
- 추상자료형 기능 함수 7개

------------------------------------------

stack 형태의 추상자료형 함수 구현
- 무언가를 쌓아올리다는 의미

연결리스트의 스택 추상자료형 함수 기능 4개를 구현
- push() : 연결리스트 데이터 삽입
- poo() : 연결리스트 데이터 제거
- peek() : 연결리스트 데이터  참조
- isEmpty() : 해당 연결리스트가 비어있는지 여부를 체크


