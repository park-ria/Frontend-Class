* 팀 프로젝트 진행 시 git & git-hub 사용방법

- 메인 / 장바구니 / 로그인 / 상세페이지
- 공통된 요소 => header / footer

1. PM의 입장
- 같이 소통할 수 있는 레포지토리 > new
(teamproject-corea)
https://github.com/park-ria/teamproject-corea

- 팀원들을 현재 레포지토리 초대
Add collaborators to this repository > Invite collaborators > Add people > 팀원 git-hub name 넣고 초대

2. 팀원의 입장
- 우측 상단, notification 클릭
- invite 클릭 > Accept invitation 클릭

3. PM의 입장
- 팀 프로젝트를 진행하기 위한 별도의 전용 루트 폴더 생성 > 코드로 열기 > bash 터미널 열기
>git init(깃 초기화)
>git remote add origin git-hub주소 
  => git remote add origin https://github.com/park-ria/teamproject-corea.git
>git remote -v => 반드시 fetch, push 둘 다 나와야 함!!!
>git add . => 내 루트폴더에 있는 데이터를 스테이징 에어리어에 옮기겠다
>git status => 스테이징 에어리어로 갔는지 상태 확인
>git commit -m "20240716 / ria / git first commit" => 나중에 훗날 커밋메세지를 참고해서 그때 당시의 데이터를 찾아올 수 있도록 해주는 일종의 라벨
>git push origin master

4. 팀원의 입장
>git-hub repository 가서 올라왔는지 확인


* 실무에서 작업을 할 때 환경!!!
1) PM
2) 중간관리자 2~3명
3) 막내급 개발자 2~3명
브랜치(Branch) : 팀원들이 작업한 공간
마스터(Master) : 최종 통합



* 브랜치 만드는 방법
1) CLI 방식으로 브랜치 생성
>git checkout -b 브랜치명
  새로운 브랜치명이 생성되고 그 브랜치로 갈아 타겠다.
  ex)git checkout -b develop

  최종 납품할 제품 데이터 보관 메인 브랜치 : 마스터
  각 조원들이 작업한 제품 데이터를 1차 병합 및 보관할 서브 브랜치 : develop
  => 로컬에만 브랜치가 생성된 것이고, git-hub에는 브랜치가 안올라간 상황

>git add .
>git commit -m "develop"
>git push origin develop

  이 세줄을 한줄로 쓸 수 있음
=>git push --set-upstream origin develop

  -> PM은 조원들에게 앞으로 merge 요청은 master로 하지 마시고, develop으로 요청해주시면 됩니다!!!
  -> PM은 반드시 브랜치 protected 해야함
> settings > Branches > Add classic rule 
> name 입력
> Require a pull request before merging 체크
> Lock branch 체크
> Do not allow bypassing the above settings 체크
> create 버튼 클릭

----------------------------------------

PM & 조원 어떤 방식으로 각자의 브랜치를 만들어서 병합합는가?
1. PM 입장
- 깃허브 상단 project > link a project > create new project > Kanban board > Project name 넣기
> create project
프로젝트 명 클릭 > 조원 초대
각 칸반 영역 하단, Add item 버튼 클릭 > 해야할 작업 목록을 생성


2. 각 조원(*PM 포함)
생선된 백로그 작업리스트명 클릭!!!
좌측 convert to issue 버튼 클릭!!!
(*현재 PM이 생성해 놓은 레포지토리를 반드시 선택)
우측, Development 영역 > Create a branch 파란색 텍스트 클릭!!!

신규로 브랜치 생성
- 브랜치명 => 직관적 / 현재 작업할 목록 => featur-A
- 브랜치 소스 => develop 생성!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! => teamproject-corea 선택
- create branch 클릭
- 현재, 로컬에서는 원격에서 신규로 브랜치가 생성되었다는 사실 인지x

- vs code bash 터미널에 
  > git fetch origin
  > git checkout feature-A


*featur-A를 작업해야하는 팀원 입장
- TEAMMATE_01이라는 새 폴더 생성후 vs code 열고 bash 터미널 연다
1) git pull origin master(*나의 로컬 컴퓨터에 저장된 데이터도 살리고, 원격 저장소에 커밋된 데이터도 가져와서 병합을 하겠다!!!)

2) git clone "레포지토리 주소"
원격 저장소에 커밋된 데이터를 그냥 가져와서 시작하겠다
최초 단계 빼고 거의 쓰지 않음 -> 덮어써지기 때문에 작업하던 데이터 날라감
=> git clone https://github.com/park-ria/teamproject-corea.git

3) git checkout feature-A
4) git add .
5) git commit -m "featureA"
6) git push origin feature-A
7)깃허브 상단 Pull requests > new pull request
> base : develop / compare : feature-A  > create pull request


*PM 입장에서
팀원이 슬랙이나 메신저로 병합 요청함
1)깃허브 레포지토리 선택해서 들어가서 상단의 Pull requests 클릭하면 요청온게 뜸
2) commet 남길건지, approval


This branch has conflicts that must be resolved
command line 클릭
마스터 폴더 가서 vs코드 열고
> git checkout develop
> git pull origin develop
> git checkout feature-A



===============================================================


*팀프로젝트 진행 시, git & git-hub 사용방법

- 1인 2역 (*PM / 팀원)
- 메인 / 장바구니 / 로그인 / 상세페이지
- 공통된 요소 => header / footer => 누군가가 작업
- 병합

1.PM의 입장
- 같이 소통할 수 있는 레포지토리 생성
(teamproject-ezen)
https://github.com/Divjason/teamproject-ezen

- 팀원들을 현재 레포지토리 초대
Add collaborators to this repository

- 팀원들의 git-name

2.팀원의 입장
- 우측상단, notification 클릭
- invite 메일 클릭 > accept invitation 클릭

3.PM의 입장
- 팀 프로젝트를 진행하기 위한 별도의 전용 루트 폴더 생성
- git init (*깃 초기화)
- git remote add origin "git-hub 주소"
- git remote add origin https://github.com/Divjason/teamproject-ezen.git
- git remote -v
- git add .
- git status
- git commit -m "커밋메세지"
(나중에 훗날 커밋메세지를 참고해서 그때 당시의 데이터를 찾아올 수 있도록 해주는 일종의 라벨)
- git push origin master

*실무에서 작업을 할 때 환경!!!!
1) PM 1명
2) 중간관리자 1명
3) 막내급 개발자 2명

-> 막내급 개발자 메인페이지 1차 작업

브랜치 (Branch)

1) CLI 방식으로 브랜치 생성
- git checkout -b "브랜치명"
- git checkout -b develop

최종 납품할 제품 데이터 보관 메인 브랜치 : master / main
각 조원들이 작업한 제품 데이터를 1차 병합 및 보관 서브 브랜치 : develop

git add .
git commit -m "develop"
git push origin develop

git push --set-upstream origin develop

-> PM은 조원들에게 앞으로 merge 요청은 master로 하지 마시고, develop으로 요청해주시면 됩니다!!!

-> PM은 반드시 브랜치 protected
상단 setting > branches > classic rule 

> Require a pull request before merging
> Lock branch
> Do not allow bypassing the above settings

-------
PM & 조원 어떤 방식으로 각자의 브랜치를 만들어서 병합 하는가?

1.PM의 입장
상단 Projects > Link a project > create new project
프로젝트명 클릭 > 조원 초대
각 칸반영역 하단, Add item 버튼 클릭 > 해야할 작업 목록 생성

2.각 조원(*PM포함)
생성된 백로그 작업리스트명 클릭!!!
우측, Convert to issue 버튼 클릭!!!!
(*현재 PM이 생성해놓은 레포지토리를 반드시 선택)
우측, Development 영역 > Create a branch 파란색 텍스트 클릭!!!

신규로 브랜치 생성
- 브랜치명 => 직관적 / 현재 작업할 목록
- 브랜치 소스 => develop으로 꼭 설정
- 현재, 로컬에서는 원격에서 신규로 브랜치가 생성되었다는 사실 인지x

git fetch origin
git checkout feature-A

*feature-A를 작업해야하는 팀원 입장
1) git pull origin master (*나의 로컬컴퓨터에 저장된 데이터도 살리고, 원격 저장소에 커밋된 데이터도 가져와서 병합을 하겠다!!!)

2) git clone "레포지토리 주소"
원격 저장소에 커밋된 데이터를 그냥 가져와서 시작하겠다

팀원 입장에서!!!!
상단 pull requests > new pull request
base : develop / compare : feature-A

PM 입장에서!!!!
슬랙, 메신저!!!
Pull request >

계정 2개를 가지고 > 

This branch has conflicts that must be resolved

command line
