1. 변수
2. 자료형
3. 연산자
4. 조건문
5. 반복문
6. 함수
7. DOM
8. EVENT
9. 객체
10 Class
11. 문자열
12. 배열
13. Map & Set
14. Iterable & Iterator & generator

> 정규(regular) 표현식(expression) = 정규식
  (1) 왜 탄생되었는가?
     - 사용자로부터 form 요소를 활용해서 어떤 값을 전달받는 경우, 특정 패턴을 설정해놓고 해당 패턴의 true // fasle 구분 및 분류 => 유효성 검사 혹은 예외조항처리 효율적

  (2) 패턴 = 규칙 

  (3) 정규표현식은 패턴 & 플래그
      - 패턴 => 공통적인 규칙
      - 플래그 => 옵션

  (4) 정규표현식을 생성하는 방법은 2가지
      - 직접적으로 패턴을 정의하는 방식
      - new 예약어 프로토타입 객체 => 정규표현식
      - new RegExp()
            const regexp = /\d{3}/;
            const regexp = new RegExp(/\d{3}/); 같은 의미

  (5) 정규표현식 전용 메서드
       1) 정규표현식.test(문자열) : 정의해놓은 정규표현식 패턴을 정확하게 따르고 있는지 확인하기 위한 메서드 (true // false)
        2) 정규표현식.exe(문자열) : 정규표현식에 매칭되는 문자열이 있으면 해당 결과값을 배여르이 자료형태로 반환 <-> null 반환
        3) 문자열.match(정규표현식) : 해당 문자열 내 정규표현식에 일치하는 값을 찾아줄 때 사용
        4) 문자열.replace(정규표현식, 바꿀문자열) : 해당 문자열에서 정규 표현식에 매칭되는 문자열을 찾아서 바꿀 문자열로 교체

  (6) 정규표현식에서 자주사용되는 플래그 타입
      - i(international) : 문자열 내 영문자를 찾아오거나 검사할 때, 대소문자를 구별하지 않고 검색
      - g(global) : 입력된 문자열 전역을 검색!!! // 만약, g라는 플래그가 입력되지 않는다면 무조건 설정한 패턴, 설정한 패턴을 첫번째로 검색되는 문자열만 찾아줌
         ex) lalaland에서 g를 넣지 않으면 처음 la만 찾아옴.., g를 넣으면 앞에 la 3개 찾음

  (7) 정규표현식에서는 문자열 내에서는 특정부분이 숫자의 기원, 문자의 기원인지를 구분할 수 있는 방법 제시 => 문자 클래스
      1) 숫자 클래스(digit class) : 패턴을 정의할 때, \d : 숫자의 형태를 띄고 있는 값(숫자의 기원)을 찾아라
         - \d : 0-9까지의 숫자를 찾아올 때
         - \D : 숫자가 아닌 모든 문자를 찾아오고자 할 때

      2) 공백 클래스(space class)
         - \s : 문자열 가운데 공백 혹은 줄바꿈 등의 여백요소를 찾아오고자 할 때
         - \S : 문자열 가운데 공백이 아닌 모든 문자를 찾아오고자 할 때

      3) 단어 클래스(word class)
         - \w : 문자열에 포함되는 숫자, 언더바, 대쉬 등을 찾아오고자 할 때
         - \W : 문자열에 포함되지 않은 숫자, 언더바, 대쉬 등을 찾아오고자 할 때
            ex)"ES2_0_2_4__original"에서   /"ES2_0_2_4"/  
                    \w쓰면 ES2_0_2_4를 찾아오고 \W를 쓰면 __original 찾아옴

  (8) 정규표현식에서는 시작, 끝 체크하기 위한 목적으로 탄생한 기호
      1) ^ : 캐럿, 문자열의 시작을 의미
                 ★ 특정범위를 지정하는 []안에서 사용되는 경우에는 기존 캐럿의 기능이 변경된다 
                      => 범위의 []안에서 ^쓰면 반대의 개념
                           ex) const str = "ES2024";
                                   console.log(str.match(/^[0-9]/g));      // null 
                                   // ^이 있어서 맨 앞글자가 숫자가 아니라서 null
                                   console.log(str.match(/[^0-9]/g));      // ['E', 'S']
                                   // 범위를 의미하는 []안에 ^를 쓰면 반대를 의미 0-9의 숫자가 아닌 글자를 가져옴!!
       
      2) $ : 달러, 문자열의 끝을 의미

  (9) 정규표현식, 반복패턴
      - [문자열]: 특정 범위를 지정하고자 할 때
      - {문자열} : 반복패턴 횟수를 지정하고자 할 때
      - 문자열+ : 해당 문자열이 한 번 이상 반복되는 경우
      - 문자열? : 해당 문자열이 1번 있는 경우만 찾아올 때 => 한 번 혹은 0번
                         (*해당 문자열을 한번도 사용하지 않은 경우에도 true 반환)
      - 문자열* : 해당 문자열 횟수에 관계없이 1번이상 반복되는 경우 // (*해당 문자열이 특정 반복되지 않고있는 경우에도 찾아옴)
      - . : 어떤 문자열인지 지칭하지 않은 상태에서 그냥 문자라는 것이 존재하는지 여부를 검색
              ex) /[x.y]/ => xay, xzy 가운데에 문자 하나만 오면 됨
              ex) /[x..y]/  => xaby 같이 가운데 문자 두개만 오면 됨

  (10)정규표현식, OR 검색
      - vertical bar = > 반드시 1개만 사용, 절대 띄어쓰기 안됨(*빈문자열x)

> 데이터통신
> animation