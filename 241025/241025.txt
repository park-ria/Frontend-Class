ts01

npm init -y

npm i @types/node

npm i typescript

npm i tsx

src>index.ts
const num: number = 1;
console.log(num);

tsc --init

tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "strict": true,
    "strictNullChecks": true,
    "moduleDetection": "force",
    "skipLibCheck": true,
    "jsx": "react"
  }
}

package.json에 "type":"module" 넣기

tsx src/index.ts로 결과 확인

========================================

설치 방법
React + JS(x) // TS(o)

1. vite
 - React + Typescript

2. 수동적인 방법으로 세팅하는 것(ts02)
 - react 설치 및 실행
 - react 타입을 TS 변환
 - npx create-react-app .
 - npm i @types/node @types/react @types/react-dom typescript
 - src에서 불필요한 파일 지우기
 - tsc --init
 - tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "strict": true,
    "strictNullChecks": false,
    "moduleDetection": "force",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true
  }
}

 - package.json
"type":"module"추가

 - App.js -> App.tsx / index.js -> index.tsx

 - index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);

 - App.tsx -> 모두 지우고 rafce

 - npm run start


3. 반자동의 방법으로 세팅하는 것(ts03, ts04)
 - npx create-react-app . --template typescript

4. 스타일 컴포넌트
 - npm i styled-components

 - npm i @types/styled-components -D

 - 필요없는 파일 지우기

 - App.tsx -> 다 지우고 rafce

 - index.tsx -> 
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(<App />);

