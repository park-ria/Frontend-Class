스크립트 쓰는 이유 : 동적인 페이지를 개발하기 위해(클릭, 마우스 오버 등)

html 문서 : 웹 브라우저
1. fetching 단계 
  - html 문서를 웹브라우저 전달받아서 본인이 읽을 수 있는 형태로 변환시키는 작업
2. parsing 단계
  - html 문서를 웹브라우저가 실제 읽어나가는 단계
  - 반드시 위에서 아래로(먼저 작성한 문서를 먼저 읽고, 나중에 작성한 문서를 가장 나중에)
  - script 태그를 만나는 순간 script 태그로 향해 돌진
  - html 내 특정 태그 node를 못 불러 옴..

1) body 끝나는 곳에 script => 내부스크립트
  - node를 불러 올 수는 있으나 html을 출력하는 동안 스크립트가 작동하지 x

2) script태그 속성 : async // defer
  - async : 비동기 처리
    동시에서 여러가지의 작업 수행
    현재 주어진 문제를 해결하면서 동시에 다른 기타 요소들을 해결할 수 있는 방식
    html과 script를 동시에 읽어 나가는데 둘 중에 하나가 먼저 끝나면 나머지도 끝내버리는 단점이 있음!!!

  - sync : 동기 처리
    먼저 실행되고 있는 어떤 문제를 다 처리해야지만 그 다음 문제를 처리 할 수 있는 방식

  - defer : 병렬방식으로 html & script를 읽고, 둘 중에 하나가 먼저 종료되더라도 일단 기다리고, html, script 모두 다 읽게되면 그때 fetching => 추천!!!!!!!!!!!!!!!!!

  - window.addEventListener("DOMContentLoaded", ()=>{});
    defer와 똑같은 기능

3. executing 단계 : 실제 웹 브라우저가 읽어 내려온 문서를 웹 브라우저 출력을 실행시키는 단계
