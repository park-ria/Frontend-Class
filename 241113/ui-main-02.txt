Next.js(기본 SSR방식-> 사전렌더링)
1. Page Router
- 간편한 Page Routing(폴더 혹은 파일명만으로 페이지 분기)
- Pre0Rendering(사전 렌더링) // SSR => Client Data 전달하는 속도 효율 // FCP => TTI (Hydration)

App Router가 나온 배경
1)  페이지별 특정 컴포넌트 페이지의 출력여부를 일일히 설정 & 해당 컴포넌트 페이지 내부에 매개변수 및 타입 정의 등 정리해야할 요소들이 생각보다 적지 않았다
> 특정 페이지에  영향을 미치게 하는 공통 layout 이라는 개념

2) 데이터 패칭이 특정 페이지 컴포넌트에 집중(과부하)

3) 불필요한 JS Bundle 데이터를 제외하고 client에게 전달하고자하는 목적
> Next.js는 SSR 방식으로 사전 렌더링을 하고 있기 때문에 무조건 build 단계에서 정의된 JS 데이터를 반드시 client에게 전달!

Next.js > App Router 버전 => 페이지 컴포넌트를 2가지의 형태로 구분
Server Component Page  : 서버측에서 사전 렌더링을 진행할 때, 딱 한 번만 실행(client)
Client Component Page : 서버측에서 사전 렌더링을 진행할 때, 한 번 실행하고 클라이언트에게 해당 컴포넌트 페이지가 전달된 이후 FCP => TTI(하이드레이션 단계 한 번 더 실행)


2. App Router
- Page Routing
> Common Layout

- Data Fetching
> SSR
> SSG
> ISR


next.js 설치
npx create-next-app@latest .
ok to proceed? y
would you like to use TypeScript? yes
would you like to use ESLint? yes
would you like to use TailWind Css? No
would you like your code inside a `src/` directory? yes
 Would you like to use App Router? (recommended) ... Yes
Would you like to use Turbopack for next dev? ... No
 Would you like to customize the import alias (@/* by default)? ... No 

npm run dev


globals.css 내용 전체 지우기
page.modult.css 내용 전체 지우기
page.tsx -> main과 footer 삭제
import styles from "./page.module.css";

export default function Home() {
  return (
    <div className={styles.page}>인덱스 페이지</div>
  );
}

기본적으로 App router를 활용해서 페이지 컴포넌트를 만들면 기본적으로 server 컴포넌트의 속성을 가집니다


=> client 컴포넌트

동적 파라미터의 값이 2개 이상 : Catch All Segment[...아이디]
동적 파라미터의 값이 없을 때에도 대응 : Optional Catch All Segment [[...아이디]]


> Catch All Segment 혹은 Optional Catch All Segment를 사용하면 동적 파라미터의 값을 부담없이 사용할 수 있는 장점!

> 동적 파라미터의 값이 존재 x => 404 에러메시지


Route Group : 경로상에서는 아무런 영향을 미치지 않습니다. 하지만 공통의 Layout을 적용시키고자 하는 컴포넌트 페이지들을 그룹핑!!!


------------------------------------------

Page Router 방식
-폴더명 > 페이지 라우팅

- 각각의 페이지 마다 설정하고 싶은 레이아웃을 별도로 만들어서 적용

App Router 방식

- Page Routing 설정방식
> Route Group을 설정

- Layout 설정방식
> 페이지의 부모요소로서 작동// 특정 Layout을 가지고 있는 폴더는 하위 폴더 내 모든 페이지들에게 Layout 속성을 적용

- Data Fetching 설정방식
> SSR : 사전 렌더링을 통해서 클라이언트 측ㄱ에서 어떤 요청사항이 발생했을 때, 전통적인 SSR방식보다 훨씬 빠르게 응답할 수 있도록해주는 방식

> SSG : 만약 사전 렌더링의 과정에서 많은 데이터양을 취급해야하는 상황이 발생한다면 사전 렌더링 자체에 시간 소요가 많아지기 때문에 결국 클라이언트에게 빠른 응답을 할 수 없기에 Next.js의 서버에서 Build단계를 거칠 때, 이미 클라이언트측에 전달한 데이터를 정의하는 방식

> ISR : SSG방식으로 데이터를 정의 + 개발자가 정의해놓은 시간, 주기에 맞춰서 서버측 데이터를 새롭게 업데이트하는 방식

- 서버 컴포넌트 페이지 : 무조건 서버측에서만 실행되는 페이지
- 클라이언트 컴포넌트 페이지 : 서버에서 사전 렌더링을 하는 단계에서 1회 실행 + 클라이언트 단계에서 Hydration(FCT에서 TTI로 넘어가는 순간)을 하는 순간 1회 실행

> Next.js의 경우, 가급적이면 서버 컴포넌트 페이지의 속성을 사용하라고 권장, 부득이한 경우에만 클라이언트 클라이언트 컴포넌트 페이지를 사용해줄 것

* 단, 서버컴포넌트 페이지를 사용할 때, 주의사항
1) 서버 컴포넌트 안에는 브라우저에서 실행될 코드 x
2) 클라이언트 컴포넌트라고 해서 반드시 꼭 클라이언트 단계에서만 실행되는 것은 아니다
3) 클라이언트 컴포넌트는 서버 컴포넌트를 import  불가
4) 서버 컴포넌트에서 클라이언트 컴포넌트에게 props를 전달할 때 직렬화되지 않은 데이터(=함수)는 전달할 수 없음
* 직렬화 되어있는 데이터 자료 => 객체와 같이 어떤 구조를 띄고있는 데이터(함수는 제외)

서버 : 사전렌더링 (*JS 번들데이터를 취합) 컴포넌트 페이지>
서버 컴포넌트 페이지
클라이언트 컴포넌트 페이지

RSC : React Server Component + Payload

네비게이션


--------------------------------------------------------

react : 최초의 화면(FCP)이 늦게나옴
next :최초의 화면(FCP)은 빨리 나오나 마우스 클릭이벤트(TTI)가 늦게 나옴

저 두개의 단점을 보완하는 방법 : 
8개중 2개 페이지만 쿼리값이나 파라미터 값을 받아야하는 경우 사전 렌더링때 서버로 부터 받아오도록 하고(SSR방식) 나머지 두개는 쿼리값이나 파라미터를 받아야하는 애들은 user client 입장에서 처리(CSR방식)하여 js bundle 과정(모듈이나 자바스크립트 파일을 하나의 번들로 만들어주는 것)이 줄어들이 FCP에서 TTI로 가는데 걸리는 시간이 Hydration이라는 시간이 줄어들어 효과적임

-------------------------------------------------------

1. Data Cache
- Cache : 어떤 페이지에 접속을 하게 되었을 때, 해당 페이지에 대한 정보값을 메모리 공간에 저장!
- 다른 페이지에 방문 => 해당 페이지 재방문 // 이미 방문했던 페이지의 정보를 많이 알고 있을 수록 접속 속도 및 로딩 속도가 현저히 빠르기 때문!!
- 반드시 fetch() 함수 메서드를 활용해서 어떤 데이터를 불러올 시, 사용할 수 있는 옵션 기능

> 1회 찾아온 데이터를 재사용 // 속도 매우 효율적 개선
> 매번 cache 저장// 컴퓨터 비효율적으로 cache 데이터가 많이 쌓여지게 => 로컬컴퓨터 속도 저하

"force-cache" : 무조건 캐시를 저장
"no-store" : 무조건 캐시를 저장 x
revalidate : 변수값 => 캐시를 저장(*변수값으로 들어온 주기에 따라서 캐시를 저장(*ex. ISR))

2. Request Memoization :
- 요청을 메모화 하겠다


-----------------------------------

onebite-books-server-main
> npm run start -> localhost:12345
> npx prisma studio -> localhost:555

ui-main-02
> npm run dev -> localhost:3000

-------------------------------------

Next.js

1) SSR vs CSR vs SSR
- 사전 렌더링

2) Page Router
- 페이지 라우팅 방법(폴더명)
- 캐치 올 세그먼트(동적 파라미터)
- 옵셔널 캐치 올 세그먼트(동적 파라미터 + 파라미터 x)
- 네비게이션
- 사전 패칭(pre-fetching)
- API 라우트
- 스타일링 > style.module.css
- 레이아웃 > 부모 > 자식 페이지 컴포넌트
- 데이터패칭
> SSR
> SSG
> ISR

3) App Router
- 페이지 라우팅 방법(폴더명)
- 캐치 올 세그먼트(동적 파라미터)
- 옵셔널 캐치 올 세그먼트(동적 파라미터 + 파라미터 x)
- 레이아웃 설정(layout.tsx하면 자식들 까지 적용 됨)
- 서버 컴포넌트 & 클라이언트 컴포넌트
    > 유저 > 클라이언트 > 서버 측 페이지 get // 사전 렌더링 // 동적인 페이지
    > 검색 키워드를 받는 동적인 페이지
    > 변경되지 않을 값을 보여줘야하는 정적인 페이지 -> 사전 렌더링 무한 반복할 필요 없음
    > 사전 렌더링 단계에서 클라이언트 컴포넌트 페이지만 사전 렌더링을 하고,
      서버 컴포넌트는 빌드 단계에서 렌더링을 하여 사전 렌더링을 효율적으로 줄임
    > 클라이언트 컴포넌트 안에 서버 컴포넌트가 들어가면 서버 컴포넌트가 클라이언트 컴포넌트화가 되어
      사전렌더링에 포함됨.. 그래서 되도록 하지 않는다
- 데이터 패칭
    > 데이터 캐시(무조건 캐시 저장 / 저장x / revailidate 저장)
- 리퀘스트 메모이제이션
- 페이지 캐싱
    > Full Route Cache(풀 라우트 캐시) : 서버 빌드단계에서 
    > next.js 서버가 데이터를 사전 렌더링 하기 전 단계에서 데이터의 캐시값을 저장 및 정의 해놓는 기능
       1) 정적인 페이지(Static Page) : 최초에 책 12권 정보
            - 사용자로부터 쿼리나 파라미터를 받지 X, 데이터 캐시 저장O

       2) 동적인 페이지(Dynamic Page) : 
            - 사용자로부터 쿼리나 파라미터를 받고 데이터 캐시 저장하지 않는 경우
            - 사용자로부터 쿼리나 파라미터를 받고 데이터 캐시 저장하는 경우
            - 사용자로부터 쿼리나 파라미터를 받지 않고 데이터 캐시 저장하지 않는 경우 => 매번 데이터 캐시 값이 없기때문에 매번 데이터를 받아야 함


dynamicParams => 변수, 속성
- 라우트 세그먼트 옵션
- 어떤 특정 컴포넌트 페이지를 강제적으로 Dynamic 혹은 Static 속성으로 변환하는 방법

> Client Router Cache(클라이언트 라우터 캐시)
: 브라우저에 저장이 되는 캐시
: 클라이언트 컴포넌트 페이지 역시 서버 컴포넌트 페이지처럼 유저가 특정 페이지에 접속하게 되면 브라우저에 캐시값을 저장해놓아서 향후 동일한 페이지를 방문하고자 했을 때 효율적이고 빠르게 접속할 수 있도록 도와주는 역할

----------------------------------------

Suspense는 static 컴포넌트 안에 dynamic 컴포넌트가 있을 경우 static 컴포넌트의 영향을 받지 않도록
중지해주는 역할 기본적인 옵션으로  fallback이 있는데 값을 찾아오는 동안 로딩되도록
main 페이지의 layout은 static 컴포넌트인데 안의 searchbar는 dynamic 컴포넌트여서  영향받지 않도록 suspense로 중지함
<Suspense fallback={<div>Loading...</div>}>
    <Searchbar />
</Suspense>

-----------------------------------------

스트리밍 : 유튜브 동영상
스트리밍 서비스
> 동영상 용량 크다
> 동영상 대용량 한 번에 다 받아서> 사용자에게 전달하려고 하면, 용량이 크면 클수록 사용자가 기다려야하는 로딩 비효율적으로 길어짐
100메가 > 해당 데이터를 불러온 만큼만 먼저 사용자에게 영상을 보여주고, 사용자가 영상을 보고 있는 시간동안 나머지 영상 데이터를 사용자에게 순차적으로 제공

스트리밍 서비스는 static 컴포넌트 페이지보다는 사용자에게 어떤 값을 받아서 출력 > 사전렌더링 시간을 더 많이 사용해야하는 Dynamic 컴포넌트 페이지에서 더 효율성을 발휘

------------------------------------------

스트리밍 페이지 라우팅 서비스
> Static 컴포넌트 페이지 로딩
> Dynamic 컴포는트 페이지

----------------------------------------

loading.tsx 파일(연결해주지 않아도 실행됨)
1. layout 파일처럼 동일한 폴더 및 하단 폴더 페이지에 영향을 줍니다.
2. async 예약어가 붙은 비동기처리 컴포넌트에만 영향
- 외부에 데이터를 찾아와야하는 상황(비동기)
- 외부 데이터 > Dynamic 컴포넌트 페이지 > 스트리밍 페이지 라이팅 쓸 수 있음
3. 스트리밍 서비스는 static페이지는 사용 못할까?
- Suspense > 바운더리 정의해주면 쓸 수 있음
4.Suspense 특징 : 반드시 상단 동적 파라미터 경로 변경만 가능, 그러나 key 값으로 쿼리값을 주면 가능

* 정적인 페이지 > 동적인 페이지
> Suspense 스켈레톤 

npm 스켈레톤(https://www.npmjs.com/package/react-loading-skeleton)
