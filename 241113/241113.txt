React.js
- JS를 활용해서 UI를 효율적으로 제어 라이브러리
- 라이브러리에서 제공해주는 요소들을 가지고 개발자가 대부분의 기능을 커스텀할 수 있도록 해주는 지원도구
- 페이지 라우팅 // react-router-dom // Routes & Route
- Outlet
- CSR : Client Side Rendering <-> SSR : Server Side Rendering
* SSR : 사용자 <-> 웹브라우저 <-> 서버 // 너무나 많은 서버 의존
> 서버 구현, 구동 비효율 자원
> 과중한 업부, 서버 문제

* 2018년부터 문제제기
- React.js 웹페이지 VS SSR 웹 페이지 > SEO


Next.js
- 프레임워크 // 개발자가 어떤것을 제어할 수 있는 대상 x
- 이미 완성 || 구축되어있는 문법 체계를 그냥 가져다가 사용
- 답답함을 느끼기도 합니다 && 크리에이티브한 문법 x

- 기존 SSR 방식 업그레이드 된 SSR 방식
- Pre-Rendering = 사전 렌더링 방식 채택

1) SEO 검색률이 매우 향상
2) FCP (First Contentful Paint)
3) Hydration(어떤 상태가 실질적인 상태로 변화되어지는 화학적 작용)
> 컴포넌트 마운트 => 사용자 액션 => TTI(Time To Interactive)시간 매우 개선

* Next.js
1. Framework : 거의 답이 정해져있다
2. SEO에 최적화
3. FCP > Pre-Rendering 기능
4. Hydration // TTI 개선, 시간 단축


F/E => Next.js & supabase

Server를 활용해서 API 데이터 => Next.js


* supabase(supabase.com) : firebase처럼 cloud 서버 공간
메인에서 오른쪽 상단의 깃허브로 가입하고 educational로 가입 > create a new project

Project Settings > Settings > Database > Mode:Session로 바꾸고 URI 복사

.env파일을 만들고
DATABASE_URL="postgresql://postgres.advioxtoxcdpeapdbiby:[YOUR-PASSWORD]@aws-0-ap-northeast-2.pooler.supabase.com:5432/postgres"

> npm i

주의!!!!!!!!!!!!!!!!!!!!!!! : supabase는 일주일 동안 접속 안하면 락킹 됨.. 접속해서 풀어주면 됨

schema : 서버를 구축 > DB 어떤 방식 저장, 출력 

* 프리즈마 : 배포 도구
https://www.prisma.io/

> npx prisma db push

요즘 프론트엔드 핫한 툴 : Next.js + TS + Supabase + Vecel & Prisma

> npm run seed

supabase 페이지에서 table Editor로 접속하면 테이블은 있으나 안에 데이터는 없음.. 그런 경우 빌드를 해주면 됨

> npm run build

> npm run start

localhost:12345

> npx prisma studio

---------

상위 폴더로 가서
> npx create-next-app@14 ui-main
> typescript ? yes
> eslint? yes
> tailwind css ? no
> src/ directory? yes
> app router? no
> import alias? no
> cd ui-main
> code .
> npm run dev

next.config.mjs에서 reactStrictMode를 false로 바꾸기

index.tsx 내용 모두 지우고 rafce -> index의 I 대문자로 바꿔주기

Home.modules.css 삭제

globals.css 내용 다 지우기

1. Next.js 소개
2. PageRouter
2-1) Page Routing
import { useRouter } from "next/router";

2-2) Query String

import React from "react";
import { useRouter } from "next/router";

const Search = () => {
  // 쿼리스트링 찾아오는 방법
  const router = useRouter();
  const {
    query: { q },
  } = router;

  return <h1>Search : {q}</h1>;
};

export default Search;

2-3) URL Parameter
복수의 동적 파라미터 값을 반영하는 path의 경우, Catch All Segment 기능 사용
ex) [...id].tsx

 Catch All Segment
> 파일명 : [...파일명]

 Optional Catch All Segment
> 파일명 : [[...파일명]]

2-5) 404 Page Routing

2) 네입게이션 

Next.js : 프레임워크
> React.js => jsx


ui-main은 npm run dev로 run

npm run dev는 개발자모드로 run하는 것이고
npm run start를 하기위해서는 npm run build를 해줘야 함


onebite-books-server-main은 npm run start로 run

--------------------------------

1. Page Routing

2. Navigation
- useRouter
- router.push("/test"); // 이동, 뒤로가기 가능
- router.replace("/test"); // replace는 이동을 하긴하지만 뒤로가기 방지해줌
- router.back(); // 뒤로가기

3. Pre-fetching
- index 페이지로 사용자가 최초 접속
- 현재 사용자가 보고 있는 페이지에서 이동 가능한 페이지들을 사전에 불러와서 대기해주는 역할
- 수정사항 발생 => 실제처럼 테스트를 하려면, 반드시 배포직전 단계 실행

- useRouter를 활용해서 페이지 라우팅을 하는 경우!!  pre-fetching

4. API Routes 
- API > 파일명

5. Styling
- module

----------------------------------

1. 메인페이지 안에 검색바를 삽입하고 싶었음
- searchable-layout.tsx

2. 메인페이지의 레이아웃을 관리해주는 파일
- <GlobalLayout> 해당 컴포넌트의 자식 컴포넌트 설정

3. searchable-layout.tsx는 개발자가 원하는 페이지 컴포넌트에서만 출력!
그런데 모든 페이지 컴포넌트에서 출력 하고 싶지 않음

4. searchable-layout.tsx 해당 요소가 출력되길 원하는 페이지 컴포넌트
 index & search 페이지 컴포넌트에서만 서치바가 있으면 좋겠음

5. 메인 페이지 컴포넌트의 index.tsx
-getLayout

6. Data-fetching
- 외부 API를 활용해서 데이터를 받아올 때, 동일한 데이터를 복수의 페이지에서 사용하고자 할 때 보다 효율적으로 관리해줄 수 있는 기능
- supabase라는 cloud sever를 활용해서 data를 직접 불러올 예정
- 메인페이지, 검색페이지, 개별 책정보 페이지

-----------------------------------

전통적인 방식 SSR
- User // Client // Server
- 현재 사용중인 페이지에서 사소한 1가지 요소가 변경되는 순간, 해당 페이지의 모든 데이터를 Server에 재요청
- 사소한 1가지 때문에 굳이 불필요하게 모든 데이터를 다시 가져와야 하는 불편(메모리 공간 비효율적인 사용)
- 안정성(서버라는 확실한 공간을 기반으로 데이터를 언제든지 최신화해서 가져올 수 있다라는 장점)

* SSR방식의 비효율성을 개선하기 위해서 CSR
- User // Client // Server
- 아무런 값도 가지고 있지 않은 index.html
- JS 파일들을 번들링
- 서버가 전달한 index.html + Bundle(*최초에 서버한테 받은 원본 자료)
- Virtual DOM <-> 서버에게 최초로 받은 데이터
- 웹 페이지가 최초에 마운트가 된 이후에는 엄청나게 빠른 속도로 페이지 구현
- SEO 누락 & 마운트가 되기 전까지의 Loading

* SSR방식(현 시점) > CSR 방식 장점 차용
- Pre-Rendering(사전렌더링) 사용
- User // Client // Server
- 기존에는 User가 Client를 통해서 Server에 무언가를 요청하는 시점에 맞춰서 데이터를 생성해서 전달하는 방식 VS 1차 렌더링(index.html + JS)
- Client(2차 렌더링) : UI가 출력될 수 있도록 하는 단계
- 최초에 브라우저에서 컴포넌트 마운트가 되기위한 이전 시간 현저히 줄어들게 됨(CSR의 단점 보완, CSR은 마운트 이전의 로딩 시간이 오래걸림)
- FCP : Frist Contentful Painting
- 실제 사용자가 버튼 클릭 // 인풋태그 이벤트 실행
- TTI(Time To Interactive)
- Nextjs는 FCP에서 TTI 까지의 시간을 단축 시키는 방법을 여러개를 가지고 있음
- Hydration(수화 = 물을 적시다, 물을 뿌리다) 

Data Fetching 방법
- 사전 렌더링을 하기 때문에, 사전 렌더링 시간 동안 먼저 fetching을 함, 마운트가 되는 시점에 이미 사전 렌더링을 통해 fetcing이 끝나있음

* Data Fetching
1. SSR 방식 : 사전 렌더링 기간 동안 데이터를 페칭하는 방법
   - 장점 : 무조건 가장 최신 업데이트가 되어진 데이터를 서버로부터 받아올 수 있음
   - 단점 : 만약 서버가 사전 렌더링을 해줘야하는 로우 데이터가 무거운 경우에는 사전 렌더링 이 자체 단계에서 로딩시간을 잡아먹을 수 있다

2. SSG 방식(Static Site Generation:정적인 사이트 생성) : 빌드 단계에서 최종적으로 정의된 데이터를 사전에 페칭하는 방법
   - 장점 : 서버에서 사전 렌더링 시 무거운 데이터를 처리해야하는 부담을 빌드단계에서 압축한 데이터만 가지고 처리
   - 단점 : static하기 때문에 interective 하지 못함 => 가장 최신 데이터를 받아올 수 없음

3. ISR 방식 : 사전 렌더링 + 빌드 융합 => 최초에서 페이지의 데이터 패칭 방법을 상황에 따라서 선택
(Incremental Static Regeneration) : SSG방식인 빌드 단계에서 데이터를 가져오지만 시간 주기에 따라 업데이트를 함


* 리액트와 next.js의 차이점
리액트는 CSR 방식 하나 밖에 없지만 Next.js는 실시간으로 데이터를 끌어오지 않아도 되는 프리로딩은 SSG방식으로 만들고, 최신 데이터가 필요할 때는 SSR 방식을 쓸 수 있음. 여러가지 방식으로 Data Fetching을 할 수 있음

React.js => CSR // 파일 수정, 변환 => Server 상관관계 x
Next.js => Server

Cloud 방식으로 만들어진 Server 사용
supabase 개인용 가상 Cloud 할당 > Server 구현
supabase는 next.js 를 만든 회사의 영향을 많이 받아서 next.js와 연동이 잘됨

---------------------------------------

index.tsx: SSR 방식(새로운 도서가 올라오면 실시간으로 반영되어야 하므로)

