html : 구조, 뼈대

css : 스타일 정의
> transition / transform / animation

js: 동적인 페이지를 구현
> DOM

자바스크립트 
- 객체지향 프로그래밍 언어
- 알고리즘 & 자료구조 토대로 무언가를 생성. 만들어낼 수 있어야 진정한 언어
- 라이브러리, 프레임워크(react.js, node.js, flutter 등..)
- 싱글스레드 언어 -> 후입선출 -> 먼저들어간 애는 나오지 못함

객체지향
- 객체 : 어떤 정보 및 데이터를 효율적으로 관리하기 위해서 만들어놓은 저장공간

----------------------------------------------

1. 변수 (데이터를 담는 바구니)
  > var : 가급적 사용 x, 호이스팅(hoisting=끌어올리다) 가능!
  > let : 차선 고려 : 재선언x, 재할당o
  > const : 최우선 고려: 재선언x, 재할당x => 변하지 않은 고정값 = 상수값
  - 변수명 선언 시, 유의사항
  - 변수명으로는 예약어 사용 불가!! ex) document, window, location
  - $, _, 영문자 => 변수명 첫단어 가능
  - 단, 변수명 중간 혹은 마지막에는 숫자 가능
  - 변수명은 받드시 대,소문자를 가림
1) 3가지 표기 법
  - 카멜표기법 : 낙타, numberSum
  - 스테이크표기법 : 뱀, number_sum
  - 헝가리안표기법 : 단어 대문자, NumberSum

2. 자료형
현재 변수안에 할당된 값의 자료형태를 확인 할 수 있도록 해주는 함수 => typeof
- 숫자형 : number
- 문자열 : string => "" '' ``
- 논리형 : boolean => true / false
- 기타형 : 
  null => 유효하지 않은 값(값이 아님)
  undefined => 미정 값(=값이 정의 되지 않음, 언제든 들어올 수 있음)
  NaN => 표현할 수 없는 값
> 템플릿 리터럴 문법 : 변수 안에 담긴 값 + 문자열 섞어서 => `${price}원`
- 자료형 : 숫자 64비트,8바이트 => 변수 500개 선언 => 4000바이트
- 객체 : object
   단일값이 아닌, 복합적인 데이터 자료를 저장, 보관
   온점 표기법 : jsBook.title
   대괄호 표기법 : jsBook["title"]
- 배열(객체 자식)
   해당 자료형태 안에 있는 모든 자식요소들에게 번호를 매길 수 있음
   해당 번호에 할당된 값만 찾아올 수 있고, 그 번호에 특정 값을 교체해서 넣을 수도 있음
   자식요소들이 각각의 번호를 가지고 있기 때문에, 배열 안에 담겨있는 총 자식들의 개수도 파악 가능
   index 값 : 자식요소들의 순서번호 => 반드시 0에서 부터 시작!
   length 값 : 해당 배열 안에 담겨있는 총 자식의 개수
   무조건 해당 배열의 마지막 요소 아이템의 index 값은 배열의 전체 총 자녀 개수에서 -1을 한 값과 무조건 동일
- 심벌 : "유일무이"한 값을 생성 및 보관 관리
- 함수(객체 자식)



json : javascript object notation

컴퓨터는 cpu 메모리공간 제어
메모리 가장 최소 단위 bit, 비트는 0, 1만 표현
바이트 : 8개의 비트가 모이면 1바이트
컴퓨터가 2와 8일이라는 모두 포함한 최대 공약수인 16인 16진수를 쓰며 rgb는 2의8승인 255로 rgb를 씀

직접 변수영역에 값을 할당하는 경우, 값이 어느 범위까지 변경될지 아무도 예측불가


변수는 call stack(데이터영역)에 생성되어 주소값을 담고있지만
객체는 Memory Heep(객체 변수영역)에 생성되어 key는 Memory Heep(객체 변수영역)에 할당 되지만 값은 call stack(데이터영역)에서 찾아서 그 주소값을 가져온다(참조한다)

콜스택은 스택 후입선출


자료형
1) 원시타입 : 숫자, 문자, 논리, 심볼, null, undefined => 메모리 힙 공간으로 절대 가지 않음
2) 참조타입 : 객체, 배열, 함수 => 메모리 힙 공간에 감 => 주소값 참조 타입


* 형변환 
1) 의도적으로 숫자의 형태로 변환!!!
   Number() : 숫자가 아닌 값도 숫자로 바꿈!!!!!!!!!!
   parseInt() : 인자값으로 들어온 숫자를 정수값으로 표현
   parsefloat() : 인자값으로 들어온 숫자를 실수값으로 표현 => 소수점을 가지고 있는 숫자!
2) 의도적으로 문자의 형태로 변환!!!
   String() : 모든 값을 싹 다 문자열로 바꿈
   toString() : null, undefined는 문자로 못 바꿈
3) 의도적으로 논리값으로 형태를 변환!!!
   Boolean() : 모든 값을 논리값으로 바꿈
   - 존재하는 값은 거의 대부분 true
   - null, 0, undefined는 false


3. 연산자
+ - / * : 사칙연산
% : 나누기 후 나머지 값을 찾아오는 연산자
++ -- : 증감연산자
증감연산자를 사용하는 위치에 따라 결과 값이 달라진다!
증감 연산자가 피연산자 앞에 입력되면, 연산작업 먼저 실행!
증감 연산자가 피연산자 뒤에 입력되면, 연산작업 나중에 실행!

복합대입 연산자 => 할당연산자 : += -= *= /=
y = y+x => y += x

비교연산자
-느슨한연산자 ==
-엄격한연산자 ===
-부정연산자 !

논리연산자(참 vs 거짓)
- && : and 연산자 -> 모두 참이어야 최종결과 값 true
- || : or 연산자 -> 하나만 참이어도 true

4. 조건문
- if문 : 단독으로 여러번 사용가능
- if else문 : 반드시 조건식 true여야지만 실행 그렇지 않은 경우 else문
- if / else if / else if / else
- 삼항조건연산자
- switch문 : case break / default


5. 반복문
- for문
- forEach문
- for in문 : 객체에 특화
- for of문
- while문
while (stars > 0) {
  document.querySelector("body").innerText += "*";
  stars--;
}

- do while문 : do 먼저 하고 while문 : ~을 하다!
do {
  document.querySelector("body").innerText += "*";
  stars--;
} while (stars > 0);

- break문 : 강제 종료의 의미
- continue문 : 건너뛰기의 의미

> iterable한 자료형만 사용할 수 있음!!!
> 반복시킬 수 있는 자료형
> css : 애니메이션 : animation-iteration-count -> 반복할 수 있는 기능
> iterable한 속성 > iterator 객체 만의 전유물
> 객체, 배열
> Set() : 해당 자료형의 속성을 iterable하게 할 수 있음

6. 함수 : 개발자의 상황과 문제해결에 맞춰서 생성해낼 수 있는 나만의 커스텀 계산기의 역할
- 일반 function
- 익명함수
- 화살표함수
- 매개변수, 인자값
   매개벼수는 설정 & 인자값을 받아오지 못했을 경우
   미리 매개변수 안에 값을 설정 => 실제 인자값으로 값을 받아오지 못했어도 함수 실행에 에러를 발생시키지 않음!! => 기본매개변수
- return : A함수의 결과값을 B라는 함수 혹은 외부에서 찾아서 사용할 수 있도록 해주는 명령어
- 콜백함수 : call(호출) back(다시) => 재호출
   함수가 호출되는 타이밍을 부모 함수에게 그 권한을 양도
   함수 안에 함수 => 콜백함수
function showData(name, age) {
  alert(`안녕하세요 ${name}님 나이가 ${age}세 이네요`);
}

function getData(callback) {
  const userName = prompt("이름을 입력하세요!");
  const userAge = Number(prompt("나이를 입력하세요!"));
  callback(userName, userAge);
}

getData(showData);
- 매개변수로 함수를 받아 콜백함수로 쓸 수 있다!!!

- 고차함수 : 리턴문에 함수를 쓸 수 있다!!!
const init = () => {
  return (a, b) => {
    return a - b > 0 ? a - b : b - a;
  };
};
console.log(`${init()(30, 20)}`);


ex) 무한 슬라이드 실행
 - 사용자가 슬라이드를 실행시킬 수 있는 버튼 클릭
 - 그렇다면 그 버튼을 찾아온다
 - 그 버튼에 이벤트를 부여한다
 - 그 이벤트라는 것은 각각의 슬라이드 이미지에 숫자를 부여하고 버튼을 클릭할 때마다 그 숫자가 증가하도록 만든다
 - 그런데 그 숫자가 슬라이드 개수만큼 증가한다면, 다시 최초 슬라이드 이미지의 번호로 변환시킨다
 - 그리고 위에 작동을 계속 무한 실행시킨다

> 함수 선언 + 함수 호출 => 실행
> 함수 매개변수 반드시 꼭 필수 x
> 함수를 호출할 때, 매개변수의 자리에 어떤 값을 전달하고자 한다면, 인수 혹은 인자값 삽입!
> 호출할 때 전달하는 인자값, 함수 안에서 불러오는 값은 매개변수
> 인자 = 매개변수

Callback 함수 => 기능적인 의미를 내포하고 있는 명칭

Arrow Function(화살표 함수), Function(일반함수) => 하드웨어적인 의미를 내포하고 있는 명칭


★★7. DOM
- DOM을 왜 배워야하는가?
- JS 탄생한 이유? html, css 웹 브라우저 정적 // 인터렉티브한 소통 필요
- html, css (정적인 구조) + js (html, css를 찾아와서 동적인 기능을 부여)
- html, css 웹 에디터를 통해서 작성하는 순간 => 객체

Brower Object Model => BOM(브라우저 객체 모델) => window
Document Object Model => DOM(문서 객체 모델)
DOM Tree

html > 태그(html 문법속에서 지칭하는 단어)
JS > Node(js 문법속에서 지칭하는 단어)

----------------------------------------------------------

프로그래밍 언어 : 실행문 /표현식문 
자바스크립트 = > 다중패러다임언어

함수 : 선언형 / 명령형

* 자바스크립트 함수 1급시민
자격요건
1. 함수가 일반 변수에 자료형으로 할당 가능!
2. 다른 함수의 인자 값으로 사용될 수 있어야 함
3. 다른 함수의 반환값으로 함수를 사용할 수 있어야

매개변수 & 인자값 => 전개연산자
:spread operator
=> map // json 데이터 + id값(원본 데이터 유지 + 추가 생성)
=> 참조타입


-----------------------------------------------------------

★ this 객체!!!
- this객체는 보통 일반적으로 현재 실행되고 있는 함수의 주체, 객체 등의 아이템
- window에 탐재된 시간 내장 함수에서 this를 사용하면, 무조건 window
- 일반적인 콜백함수 내에서 주체가 되고 있는 아이템을 찾아오고 싶을 때에는 직접 해당 인자를 언급하거나 경우에 따라서 this 객체를 사용한다!
- this => 함수 형태 종류에 따라서 지칭하는 대상 달라짐! function함수는 주체를 화살표함수는 window를 가져 옴
- 객체 안에 있는 메서드 함수의 경우, this는 function의 경우, 해당 메서드 함수의 부모격인 객체를 찾아오지만, 만약 화살표 함수를 사용한다면, winodw 객체를 찾아온다!

즉, 반복문에서 this를 쓰면 window 나옴 / 시간 내장함수에서 this쓰면 window 나옴 / 일반 적인 콜백함수에서 화살표 함수를 쓰면 window 나옴
=> 일반적인 콜백함수에서 일반 function함수를 쓰면 this는 함수의 주체를 가져옴!!!


------------------------------------------------------------

window 객체 안에는 시간 관련 내장 함수 존재
setInterval(function,ms) : 특정 주기동안 반복하고 싶을때
clearInterval() : 반복을 멈추고자 할 때
setTimeout(function, ms) : 몇초 이후에 실행시키고자 할 때

1. setInterval
// window 객체 안에는 시간 관련 내장 함수 존재
let count = 0;
const cbFunc = () => {
  console.log(count);
  if (++count > 4) clearInterval(timer);
};

const timer = setInterval(cbFunc, 300);
// 1000 = 1s


2. map 함수
map 함수는 배열안에 있는 각각의 개별 아이템을 찾아와서 어떤 연산작업을 한 이후 다시 해당 아이템을 모아서 새로운 배열로 생성

const arr = [10, 20, 30];
const newArr = arr.map((item, index) => item + 5);
console.log(newArr);

map은 반환을 해야하므로 {}를 안써도 된다


3. setTimeout : 일정 시간 지연 후 실행
setTimeout(function () {
  console.log(this);
  // window가 뜸 -> setTimeout는 window의 객체이기 때문에
}, 300);


4. forEach
arr2.forEach((참조변수) => {

});
map처럼 반환할게 없기때문에 그냥 함수여서 무조건 중괄호가 필요함!


5. addEventListener
document.body.innerHTML += `<button id="a">Click</button>`;
document.querySelector("#a").addEventListener("click", function () {
  console.log(this);
});

6. 객체 내의 콜백함수
const obj = {
  vals: [1, 2, 3],
  logValues: function () {
    console.log(this);
  },
};

obj.logValues(); //여기서는 주체인 obj 함수를 출력
// 객체 안에 있는 메서드 함수의 경우, this는 function의 경우, 해당 메서드 함수의 부모격인 객체를 찾아오지만, 만약 화살표 함수를 사용한다면, winodw 객체를 찾아온다!



---------

const obj = {
  vals: [1, 2, 3],
  logValues: function () {
    console.log(this);
  },
};

const arr3 = [4, 5, 6];
arr3.forEach(obj.logValues); // 여기서는 window가 나옴...
// 객체 안에 메서드 형식으로 정의한 함수는 외부에 별도 존재하는 함수의 콜백함수로 사용할 시, 기존 객체와의 관계성이 제거된다

-----------------------------------------------------------


프로그래밍 코드 작성 및 실행 : 객체지향 / 절차지향


* CS 기본 개념
1) Variable(변수)
2) Scope(범위) *** : f12 source에서 debugging
- 전역 : Global, 1번만 작성해놓으면 언제, 어디서든 가져다가 사용가능! => 진짜 전역변수는 var와 정의되지 않은 치트키 변수
- 지역 : Local, 특정 범위 안에서 설정, 그 범위 안에서만 사용가능!
- Block : 특정 제어문의 조건식 안에서 설정된 변수들은 Block 범위에서만 움직임
   ex) for, if 등 제어문의 key
- Script : 전역변수처럼 행동!!! 모듈에서 변수들이 겹칠 수 있으므로 단독이나 모듈화로 쓰이지 않을 때는 전역변수 처럼 쓰이지만 모듈화 된 스크립트 사이에선 스크립트 스코프 => let, const만


-----------------------------------------------------------

시간내장 함수
1) 콜백함수를 사용할 수 있음
2) this 객체를 사용했을 때, 지칭하는 것이 window

1. setInterval() : 특정 시간에 맞춰서 무언가 반복적으로 자동 실행하도록 해주고 싶을 때
2. clearInterval() : setInterval()를 통해서 박복실행되고 있는 해당 함수를 정지시켜 줄 수 있는 단짝친구
3. setTimeout() : 특정 시간 이후에 실행시키고자 할 때
