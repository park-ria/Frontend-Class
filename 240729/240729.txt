html : 구조, 뼈대

css : 스타일 정의
> transition / transform / animation

js: 동적인 페이지를 구현
> DOM

자바스크립트 
- 객체지향 프로그래밍 언어
- 알고리즘 & 자료구조 토대로 무언가를 생성. 만들어낼 수 있어야 진정한 언어
- 라이브러리, 프레임워크(react.js, node.js, flutter 등..)
- 싱글스레드 언어 -> 후입선출 -> 먼저들어간 애는 나오지 못함

객체지향
- 객체 : 어떤 정보 및 데이터를 효율적으로 관리하기 위해서 만들어놓은 저장공간

----------------------------------------------

1. 변수 (데이터를 담는 바구니)
  > var : 가급적 사용 x, 호이스팅(hoisting=끌어올리다) 가능!
  > let : 차선 고려 : 재선언x, 재할당o
  > const : 최우선 고려: 재선언x, 재할당x => 변하지 않은 고정값 = 상수값
  - 변수명 선언 시, 유의사항
  - 변수명으로는 예약어 사용 불가!! ex) document, window, location
  - $, _, 영문자 => 변수명 첫단어 가능
  - 단, 변수명 중간 혹은 마지막에는 숫자 가능
  - 변수명은 받드시 대,소문자를 가림
1) 3가지 표기 법
  - 카멜표기법 : 낙타, numberSum
  - 스테이크표기법 : 뱀, number_sum
  - 헝가리안표기법 : 단어 대문자, NumberSum

2. 자료형
현재 변수안에 할당된 값의 자료형태를 확인 할 수 있도록 해주는 함수 => typeof
- 숫자형 : number
- 문자열 : string => "" '' ``
- 논리형 : boolean => true / false
- 기타형 : 
  null => 유효하지 않은 값(값이 아님)
  undefined => 미정 값(=값이 정의 되지 않음, 언제든 들어올 수 있음)
  NaN => 표현할 수 없는 값
> 템플릿 리터럴 문법 : 변수 안에 담긴 값 + 문자열 섞어서 => `${price}원`
- 자료형 : 숫자 64비트,8바이트 => 변수 500개 선언 => 4000바이트
- 객체 : object
   단일값이 아닌, 복합적인 데이터 자료를 저장, 보관
   온점 표기법 : jsBook.title
   대괄호 표기법 : jsBook["title"]
- 배열(객체 자식)
   해당 자료형태 안에 있는 모든 자식요소들에게 번호를 매길 수 있음
   해당 번호에 할당된 값만 찾아올 수 있고, 그 번호에 특정 값을 교체해서 넣을 수도 있음
   자식요소들이 각각의 번호를 가지고 있기 때문에, 배열 안에 담겨있는 총 자식들의 개수도 파악 가능
   index 값 : 자식요소들의 순서번호 => 반드시 0에서 부터 시작!
   length 값 : 해당 배열 안에 담겨있는 총 자식의 개수
   무조건 해당 배열의 마지막 요소 아이템의 index 값은 배열의 전체 총 자녀 개수에서 -1을 한 값과 무조건 동일
- 심벌 : "유일무이"한 값을 생성 및 보관 관리
- 함수(객체 자식)



json : javascript object notation

컴퓨터는 cpu 메모리공간 제어
메모리 가장 최소 단위 bit, 비트는 0, 1만 표현
바이트 : 8개의 비트가 모이면 1바이트
컴퓨터가 2와 8일이라는 모두 포함한 최대 공약수인 16인 16진수를 쓰며 rgb는 2의8승인 255로 rgb를 씀

직접 변수영역에 값을 할당하는 경우, 값이 어느 범위까지 변경될지 아무도 예측불가


변수는 call stack(데이터영역)에 생성되어 주소값을 담고있지만
객체는 Memory Heep(객체 변수영역)에 생성되어 key는 Memory Heep(객체 변수영역)에 할당 되지만 값은 call stack(데이터영역)에서 찾아서 그 주소값을 가져온다(참조한다)

콜스택은 스택 후입선출


자료형
1) 원시타입 : 숫자, 문자, 논리, 심볼, null, undefined => 메모리 힙 공간으로 절대 가지 않음
2) 참조타입 : 객체, 배열, 함수 => 메모리 힙 공간에 감 => 주소값 참조 타입


* 형변환 
1) 의도적으로 숫자의 형태로 변환!!!
   Number() : 숫자가 아닌 값도 숫자로 바꿈!!!!!!!!!!
   parseInt() : 인자값으로 들어온 숫자를 정수값으로 표현
   parsefloat() : 인자값으로 들어온 숫자를 실수값으로 표현 => 소수점을 가지고 있는 숫자!
2) 의도적으로 문자의 형태로 변환!!!
   String() : 모든 값을 싹 다 문자열로 바꿈
   toString() : null, undefined는 문자로 못 바꿈
3) 의도적으로 논리값으로 형태를 변환!!!
   Boolean() : 모든 값을 논리값으로 바꿈
   - 존재하는 값은 거의 대부분 true
   - null, 0, undefined는 false


3. 연산자
+ - / * : 사칙연산
% : 나누기 후 나머지 값을 찾아오는 연산자
++ -- : 증감연산자
증감연산자를 사용하는 위치에 따라 결과 값이 달라진다!
증감 연산자가 피연산자 앞에 입력되면, 연산작업 먼저 실행!
증감 연산자가 피연산자 뒤에 입력되면, 연산작업 나중에 실행!

복합대입 연산자 => 할당연산자 : += -= *= /=
비교연산자
-느슨한연산자 ==
-엄격한연산자 ===
-부정연산자 !

논리연산자(참 vs 거짓)
- && : and 연산자 -> 모두 참이어야 최종결과 값 true
- || : or 연산자 -> 하나만 참이어도 true

4. 조건문
- if문 : 단독으로 여러번 사용가능
- if else문 : 반드시 조건식 true여야지만 실행 그렇지 않은 경우 else문
- if / else if / else if / else
- 삼항조건연산자
- switch문


프로그래밍 언어 : 실행문 /표현식문 
자바스크립트 = > 다중패러다임언어

함수 : 선언형 / 명령형

프로그래밍 코드 작성 및 실행 : 객체지향 / 절차지향


