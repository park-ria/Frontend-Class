기존 React.js: npx create-react-app .
vite => npm create vite@latest

기존 TS만 설치 : npx create-react-app . --template typescript
vite => npm create vite@latest > typescript + swc

스타일 컴포넌트 : 
npm i styled-components
npm i @types/styled-components -d

스타일 리셋:
npm i styled-reset

=================

>npm create vite@latest > typescript + swc
>npm i
>npm i styled-components
>npm i @types/styled-components -d
>npm i styled-reset

* 슬라이드 // 모달
- npm > 패키지 > 슬라이드 & 모달 한 번에 제어
- JS // 라이브러리 => 기능 구현 VS React.js // npm => 기능 구현

모션(framer-motion) 설치
framework motion (https://www.framer.com/motion/) => npm install framer-motion

>npm run dev

asset, app.css, index.css 지우기

>App.tsx 내용 지우기
function App() {
  return <></>;
}

export default App;


>main.tsx 내용 지우기
import { createRoot } from "react-dom/client";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(<App />);


==============================


animate : 실제 애니메이션 실행값

- type : 애니메이션 종류 > spring

-damping : spring 진행 시, 반대 힘
(값이 클수록 반대의 힘도 커짐, 기본값 10, 0은 무중력 상태)
- mass : 애니메이션 진행하고자 하는 요소의 무게설정(값이 클수록 무게가 커짐)
- delay : 애니메이션을 진행하고자할 때, 특정 시간만큼 지연 후 실행

* null // undefined : 
TS : null 타입 // undefined 타입
> undefined : 값이 아직 정의되지 않은 상태
   1) 원래는 진짜로 값이 들어와야 하는데, 어떠한 경우에 의해서 아직 값이 들어오지 못한 경우
   2) 오타, 에러, 오류로 인해서 값을 받을 수 없는 부득의한 경우

> null : 의도적으로 유효하지 않은 값을 정의한 상태
- 일부러, 계획적으로 해당 값을 정의하지 않은 상태
- (값이 없는) 값


Vanilla JS : 
Zoomin // Zoomout
> window > event // scroll
> scrollY : 위로부터 스크롤이얼만큼 내려왔는가에 대한 값
> z축으로 값으로 변형해서 사용


Framer-motion : 
컴포넌트 마운트 // 어떠한 모션이 발생되면 기본적으로 motionValue이 생성!
> x, y 기타 등등 모션관련 value 값이 담겨있음
> useMotionValue() 라는 훅을 사용

★useMotionValue
★useTransform : useMotionValue()를 통해서 찾아 온 값을 다른 형태의 값으로 변환 시키고 싶을 때
★useScroll : 스크롤 정보 값을 찾아 옴

===============================

React.js를 활용해서 slide를 만들 때, 기존 바닐라 자바스크립트와 가장 큰 차이점을 느끼는 부분
-

React.js : 컴포넌트 > 비동기적으로 작동 > 컴포넌트의 생애주기 관리(마운트 // 언마운트 // 렌더링이 되었을 때)

-------------------------------


슬라이드 
framer-motion : AnimatePresence(https://www.framer.com/motion/animate-presence/) 쓰기




