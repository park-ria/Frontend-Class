Q. API 데이터를 활용해서 웹 브라우저 화면 출력

=> 다른 기타 기관 및 플래폼 제공 API

----------------------------------

CORS Policy : 검증되지 않은 아이피를 막음

----------------------------------

node.js => 서버 구축 // 백엔드

프론트엔드 개발자가 node를 배워야하는 이유는 API를 가져와야 하는데 CORS Policy 막히기 때문에
node.js를 통해 proxy server를 만들어서 다뤄야 하기 때문에 필요함

나만의 검증된 서버 구축 // 경유 // API 데이터


----------------------------------

웹 서비스 제품 

----------------------------------

상품정보 DB => 1) JS // 2) json

JS 분야에서는 Module이 중요함
> 레고 블록 같이 하나의 블록이라고 생각하면 됨
CJS : Common Js Module
ESM : Ecma Script Module

오타 / 실수
> bug => 오류
> deburging 

검색기능 > search.js
상품 정보 > product.js

<script defer type="module" src="./script.js"></script>
type="module"를 넣어줘야 함!! 그래야 외부의 모듈 파일을 읽어 올 수 있음!!!!!!



자바스크립트 시간은 밀리초를 씀
밀리초 : 1초 = 1000 밀리초
> 1970년 1월 1일부터 밀리초로 증가하고 있음


json => Javascript Obejct Notation
(*자바스크립트 객체 표기법)

프론트엔드 개발자 : 사용자가 불편함 없이 웹사이트 서비스 사용할 수 있도록 해주는 것

소통 : 쉽고 빠르고 편리하게 서로간의 데이트를 공유
웹 브라우저 : html, css, js

백엔드 개발자 : 사용자가 CRUD 프로세스 입각에서 어떻게 데이터를 효과적으로 저장, 관리, 폐기 보관

JS를 활용해서 상품정보 데이터 생성 > 찾아오는 방법
json을 활용해서 상품 정보 데이터 생성 > 찾아오는 방법



* set => 배열 중복 제거
예제는 240719>04scss>game.js
set은 배열이 아니라 인덱스를 가지고있는 객체여서 length가 아닌 size를 쓴다!!

* map => 원본의 배열 데이터를 그대론 둔 상태로 어떤 추가 적인 기능을 부여해서 새로운 배열을 다시 생성할 때 사용하는 함수
- forEach & for & for of => 기존 원본 데이터를 바꿔버림, map은 원본을 바꾸지 않음!!!

* sort => 배열 안에 입력된 값을 내림 혹은 오름차순으로 정렬 시켜주는 함수
오름차순
arr.sort((a, b) => {
  return a - b;
});

내림차순
arr.sort((a, b) => {
  return b - a;
});

* filter => 배열 안에 입력된 값을 하나씩 찾아와서 조건을 기준으로 참(true)인 값만 추출해서 새로운 배열로 생성해주는 함수!!

* find => 배열 안에 그 값을 가지고 있는 애만 찾아서 새롭게 배열에 담음
filter와 다른 점은 filter는 복수, find는 단일


실행문 => c, java 실행 된 값을 어디에 보내줘하지 않으면 실행하고 끝나버림

표현식문 => return 문

다중패러다임 => 자바스크립트
{}를 쓰면 표현식문이여서 return을 꼭 써야하는데
{}를 쓰지 않으면 실행문이므로 return을 쓰지 않아도 됨

표현식 문! => {}를 썼으므로 return을 써야 함!!!!!!!!!
arr.sort((a, b) => {
  return a - b;
});

실행문! => {}를 안 썼기때문에 return을 안 써도 됨
arr.sort((a, b) => b - a);



--------------------------------------------------------------
챗봇 api
1. 채널 설정 > 일반설정 > 버튼 설치 및 설정 > 채널톡 버튼 설치 > 기본 자바스크립트 > 스크립트 복사하기
2. 채널 설정 > 채널 프로필
3. 개인 설정 > 매니저 설정
4. 채널설정 > 상담
5. 채널설정 > AI 에이전트(ALF)


---------------------------------------------------------------

Fake Server
(data 구조를 설정 // in & out이 안되기 때문)

git-hub : db.json 파일 생성 후 신규 레포지토리 생성 // commit!!!

https://my-json-server.typicode.com/유저네임/레포지토리이름
https://my-json-server.typicode.com/park-ria/oliveyoung-fake
https://my-json-server.typicode.com/park-ria/oliveyoung-fake/db

repositories > new > repository name 입력 > create repository
반드시 json명은 db.json으로 해야함!!!(db.json은 최상위 루트폴더에 있어야함!!!)

Quick setup -> uploading an existing file > db.json을 드래그앤 드롭 > commit changes

주의 : data.json 5mb ~ 8mb 안에 해야함!! 셀의 갯수가 20~25개 이내여야 함!!!!

---------------------------------------------------------------

BOM에서 window 객체 > 다른 기타 페이지로 이동할 수 있도록 해주는 속성!!!
window.location.href

---------------------------------------------------------------

url 주소 어떻게 구성되어 있는가?
https://www.naver.com:8080/product/skincare/toner?category=skintoner&productname="dokdotoner"

http / https : 프로토콜(규약, 약속)
www.naver.com : 도메인
8080 : 포트번호 클라이언트와 서버가 서로 만나기 위한 만남의 장소
product/skincare/toner : path 경로 
?category=skintoner&productname="dokdotoner" : 파라미터 / 쿼리스트링

=> http://127.0.0.1:5500/product-detail.html?category=it&name=mouse


인코딩 : 사람이 이해할 수 있는 언어를 컴퓨터가 이해할 수 있도록 바꿔주는 작업
https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=%EB%82%98%EC%9D%B4%ED%82%A4

디코딩 : 컴퓨터의 언어를 사람이 이해할 수 있도록 바꿔주는 작업


json => 이전 페이지에서 받아온 2개의 query 값
category / name => json

----------------------------------------------------------------

변수는 cpu에서 변수를 담을 메모리 공간 생성함
전역변수 => 브라우저 // JS => parsing(읽음) -> 지금 당장 필요하지 않아도 전역변수는 다 읽어야 함 -> 그래서 되도록 전역변수를 쓰지 말고 지역변수를 써라!!!!!!