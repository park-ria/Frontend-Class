자바스크립트 요약본

1. 자료형
- 문자 / 숫자 / 논리 / 배열 /객체
- 논리 : null // undefined
- null : 유효하지 않은 값
- undefined : 아직 정의가 되지 않은 값, 미정 값
- 자료형 변환 : 
    1) json 혹은 parameter를 거쳤다가 돌아오는 값은 무조건 문자열
    2) 숫자 + 문자 = 문자

2. 연산자
- 병합연산자 : 좌항 ?? 우항 => 좌항 값이 존재하면, 좌항의 값을 출력, 좌항 값이 존재하지 않으면 우항의 값 출력
- 삼항조건연산자
- switch & case 종결문(스크립트 break // 리액트 return)

3. 객체 = Object
- 빈 객체 // 온전 표기법 & 대괄호 표기법
- 구조분해할당
- 객체의 값을 반복실행하고자 할 때 : Object.keys => 배열 변환

4. 배열
- 인덱스 = 0부터 // length 속성
- 모든 배열 내 마지막 element = item 인덱스 === length -1
- push, pop, shift, unshift, slice, concat, join, find, indexOf, filter, map, sort, reduce
- push : 특정배열의 맨 끝 부분의 값을 추가하고, 추가된 이후의 새로운 배열의  총 개수를 반환하는 메서드 함수
- pop : 특정 배열에 맨 끝 부분의 값을 제거하고, 제거된 값을 반환
- unshift : 특정 배열의 맨 앞 부분의 값을 추가하고, 추가도니 이후의 새로운 배열의 총 개수를 반환하는 메서드 함수
- shift : 특정 배열에 맨앞 부분의 값을 제거하고, 제거된 값을 반환
- slice : 
    기존 배열에서 특정 범위를 잘라서 "새로운 배열"을 반환 
    인자값 2개 => 첫번째 인자(인덱스)부터 두번째 인자(인덱스) 이전까지의 값을 잘라서 새로운 배열 반환!
    인자값 1개 => 해당 인자(인덱스)부터 끝까지 잘라내기!
- concat : 서로 다른 복수의 배열을 하나로 합쳐주도록하는 메서드 함수
- indexOf : 인자값으로 들어온 아이템의 인덱스 값을 찾아주는 메서드 함수
- includes : 특정 배열에 특정 요소가 있는지 판별 // true, false
- find : 특정 배열에서 찾고자 하는 값을 찾아서 해당 값을 반환
- filter : 특정 배열에서 어떤 조건에 만족하는 아이템 요소들만 모아서 하나의 새로운 배열로 반환시켜주는 메서드 함수
- map : 특정 배열 내 아이템들에게 어떤 연산 및 실행문 처리 후 새로운 배열로 반환시켜주는 함수
- sort : 특정 배열 내 값을 정렬하고자 할 때 사용하는 메서드 함수
- join : 특정 배열 내 요소들을 하나의 문자열로 변환시켜주는 메서드  함수(구분자)
- reduce : 특정 배열 내 요소들을 순회하면서 값을 찾아서 누적 계산해주는 함수
   

5. 단락회로 평가(병합연산자와는 다름)
- 좌항 && 우항 : 좌항부터 값을 체크하는데, 좌항의 값이 true아닌 false 값을 반환한다면, 우항의 값은 실행하지 X
- 좌항 || 우항 : 비록 좌항의 값이 false를 반환하지만, 만약 우항의 값이 true라면, 좌항의 반환값과 상관없이 우항의 값을 실행 O

6. 스프레드 연산자 = 전개 연산자
- 객체 및 배열의 값을 병합하고자 할 때, 전개 연산자가 하는 역할 => 객체 및 배열 내 각각의 아이템 요소들을 독립적인 값을 풀어서 가져가는 역할 => 참조타입 형식의 자료역시 값을 분리시킬 수 있었던 것


----------------------------------------------------------

npx create-react-app .
npm i styled-components
npm i react-router-dom
npm run start


*리액트 hook

useState
useRef
useEffect
useReducer
useMemo
useContext
useCallback
useNavigate
useParams
useSearchParams


----------------------------------------------------------

* Emotion Diary

- Page Routing
npm i react-router-dom

- styled components
npm i styled-components

1) 구조
- Home 페이지(*사용자 최초 방문)
- New 페이지(*일기를 작성할 수 있는 페이지)
- Diary 페이지(*특정 날짜에 입력한 일기를 상세하게 조회해볼 수 있는 페이지)
- Edit 페이지(*일기 조회 후 해당 일기를 수정해야할 때, 접속가능한 페이지) > 수정 & 삭제

2) 폰트
- 구글 폰트 > 폰트 가져와서 설치
index.css 최상단에 @import url("https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&display=swap"); 넣기

3) 이미지
- 멀티미디어 소스(동영상, 이미지) public에 넣어라!!!
- 동영상은 무조건 public!!
- 이미지는 src && public

4) 컴포넌트 기반
- 중복 및 반복해서 사용될 요소들은 컴포넌트 만들어놓고 상황에 따라서 가져다가 사용할 수 있는 장점!!

5) React.js > JS의 문법을 사용 > Module
- 특정 기능을 하는 함수를 1개 만들어 놓고, 필요할 때마다 해당 함수를 가져다가 사용할 수 있다는 의미!

6) Page Routing 기능
- 페이지

7) Link VS useNavigate
- Link => a태그

http://localhost:3000/diary
http : 프로토콜
localhost : 호스트, 도메인
127.0.0.1 : IP 주소, DNS
:3001 : 포트번호
/diary : path = 동적경로 값 = URL 파라미터
?sort=latest : 쿼리스트링

* 스크립트 쓰는 이유 : 동적페이지 => 인터렉티브한 페이지 구현
   JS > 사용자 이벤트 


-------------------------------------------------------

감정 아이콘 정의
어떤 감정 // 텍스트 // 이미지
id:1
name:"완전좋음"
img:getEmotionImgById(1)

-------------------------------------------------------
styled 자동완성 기능 추가
   - 확장 vscode-styled-components 검색 후 Styled Components가 만든거 설치

emmit 기능 추가
환경설정 ctrl + , => 작업 영역 클릭 => include 검색 => Emmet: Include Languages에 항목추가 => 항목 : javascript 값: javascriptreact 넣기 => 추가


