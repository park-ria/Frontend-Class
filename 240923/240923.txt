1.Page Routing
2.Styled Component
3.React Hooks
4.Custom Hooks
5.Memoization

backend 부분
db(DataBase) : 각종 다양한 형식의 데이터가 보관
관계형 DB : 유튜브 A아이디 + 2024년 업로드 영상 + 시청정보 + 댓글
   - 학습량 & 난이도 높은편 // 서버운영 부담
   - MySQL

비관계형 DB : 상대적으로 다루기 쉬움 // 서버 운영 부담이 덜함 // DB가 다 독립적이기 때문에 복잡한 구조의 웹앱페이지 제작X
   - 글로벌 기업 비관계형 DB 클라우드 서비스 시행
   - firebase : AWS 보다는 쉽게 접근 가능
       firebase 홈페이지 전체메뉴 > 인증, firestore

고차원 구조(Scheme) 설계 및 세팅

다양하고 많은 멀티미디어 컨텐츠 다룰 수 있어야 함
img // video 용량 부담 && Server 부재
사용자가 멀티미디어 컨텐츠를 업로드 // 삭제
> 본인 업로드한 컨텐츠, 본인 삭제 권한

Typescript는 자바슼므립 내부에서 사용할 수 있는 모든 자료형의 타입을 지정!

TS + React.js
JS + React.js : 터미널 npx create-react-app .

TS : JS "Super Set" 언어
> 보다 효율적인 방법 : Vite (https://ko.vitejs.dev/)
터미널에 npm create vite@latest 입력- > y -> 프로젝트이름 입력하기 sns-flatform 
-> React 선택 엔터 -> TypeScript + SWC(타입스크립트 전용 컴파일러) 선택 엔터
-> VScode 닫고 만들어진 폴더(sns-flatform)로 들어가서 열기
-> npm i(노드모듈 설치) -> npm run dev -> 콘솔창에 local의 url을 컨트롤 누른상태에서 열기

-> App.css, index.css 삭제
-> App.tsx 
	function App() {
	  return <></>;
	}

	export default App;
-> assets 지우고
-> main.tsx => StrictMode 지우고 index.css 지우기
	import { createRoot } from "react-dom/client";
	import App from "./App.tsx";

	createRoot(document.getElementById("root")!).render(<App />);

-> index.html -> favicon 지우기 title 바꾸기
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SNS Flatform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

루트 폴더 & git 연동
-> github -> repository -> new -> repository name : sns-flatform -> create repository

-> 터미널 ctrl + c 해서 런 종료
-> git bash 창 열어서 -> git init
-> 깃 연동 : git remote add origin https://github.com/park-ria/sns-flatform.git
-> git remote -v => fetch와 push가 잘 나와야 함

라이브러리 설치
react-router-dom
   npm install react-router-dom@6.14.2
   npm install styled-components@6.0.7
   npm install @types/styled-components -D

-> npm run dev

단순히 앱을 개발하는 단계에서만 필요한 패키지 : devDependencies => 별도 관리 => -D를 입력하면 devDependencies로 감
실제 앱을 배포한 이후에도 필요한 패키지 : dependencies
--------------------------------------------

react는 jsx, js 동일
typescript는 tsx 확장자

---------------------------------------------

SNS Platform
Vite 빌드도구
   - react를 활용해서 app 번들링
   - Bundle => 무언가를 하나로 묶는 작업
   - JS역할 => 웹 & 앱 페이지의 기능 다양 => 구현 JS 훨씬 더 많이 사용
   - html, css + JS => 1000줄 ~ 2000줄 이상..
   - 1 개의 파일 > 데이터 양 삽입 > 버그 취약, 충돌, 유지보수 어려움
   - JS Ecma 기관 => Module => import & Export
   - 1개의 앱 => 모듈 30~50개 => 웹 브라우저 파일 파싱 executing 로딩시간
   - JS 30개 => 물리적으로 1개의 JS 압축 => 로딩
   - 번들러 => JS 번들링
   - webpack => 번들러 1세대 등장 => 번들링 해야하는 모든 JS 다 읽음 100 => 1개의 JS 변화 // 100개 다 읽음
   - 시간이 가면 갈 수록 영상 멀티미디어 소스 늘어남 > 앱이 갖춰야하는 기능 갈수록 다양하고 화려해짐 => 고사양 필요
   - meta // facebook => react.js > 가상돔
   - 차세대 번들러 esbuild 등장 => HMP(Hot Module Replacement) 방식을 채택 => webpack 70배나 속도가 빠른 번들러 => 안정성 문제 => 잦은 버그 // 반복되는 번들링 작업 => 오류사항
   - HMR(Hot Module Replacement)방식을 채택 + 안정성 개선 => Vite(프랑스어 => 빠르다) => 번들링 + 컴파일링 + 배포관여 => 빌드도구


*컴파일 => scss// Live sass Compiler(번역기)

*웹 => html, css ,js

*css => scss
*js => ts

프론트엔드 개발 : react + ts

프로그래밍 언어 방식 
  - 컴파일 언어 
     > C, C++, Java
     > 컴파일링을 해야지만 컴퓨터가 이해
     > 컴파일링 언어들은 컴파일링을 하기위해서 우선, 최초에 해당 프로그래밍 언어 모든 문법을 스캐닝 -> 초기 로딩 시간이 김
     > 오류, 버그 적음

  - 인터프리터 언어 : Javascript
     > 자바스크립트를 활용해서 1문장 작성 => 컴파일링의 시간 불필요
     > 오류, 버그 찾기 어려움

프로그래밍 언어 실행
  - 선언형
  - 명령형


.ts => typescript 확장자
.tsx = > typescript + xml

----------------------------------------------------------

크로스 브라우징 세팅 브라우저 간 통일
npm i styled-reset 

----------------------------------------------------------

원래, 원칙적으로 회원가입, 관리기능 Backend > cookie

data 통신
1. client, sever
2. get, post
3. cookie : 향후 개인정보 , 서핑 정보, 히스토리
> 형태 O, 값 X
> 회원가입 // 아이디 & 패스워드

----------------------------------------------------------

Protected Router : 라우팅 되어진 페이지를 다 보여주는게 아닌 isLoading 값이 false가 되면 보여주도록 하는 것

----------------------------------------------------------


firebase 인증하기 -> 프로젝트 만들기 -> 프로젝트 개요 -> </> 아이콘 클릭 -> 앱 닉네임 : web -> npm install firebase 복사 후 터미널에 붙여넣고 package.json에 설치가 되었는지 확인 -> sdk를 추가해서 firebase 초기화 : firebase.ts 파일 만들고 sdk 복사해서 가져다 붙이기 -> 콘솔로 이동 -> 메뉴에서 Authentication 클릭 -> 시작하기
-> 로그인 방법 추가 : 이메일/비밀번호 -> 사용설정 체크 -> 저장 -> 사용자 클릭(로그인 정보들을 봄) 
-> firebase.ts 위에 import { getAuth } from "firebase/auth"; 추가
-> firebase.ts 아래에 export const auth = getAuth(app); 추가
-> App.tsx에 import {auth} from "./firebase"; 추가 -> await auth.authStateReady(); 추가

----------------------------------------------------------

Firebase SDK : Software Development Kit -> Third-party


--------
깃허브로 로그인 하는 법

firebase > authentication > 로그인 방법 > 새공급업체 추가 > 추가 제공업체에서 깃허브 클릭
> github.com/settings/developers 크롬으로 접속 > Oauth Apps > Register a new application
> Application name에 sns-flatform01 입력 > firebase에서 아래의 콜백 URL을 복사하여 github의 Authorization callback URL에 넣기 > 콜백 URL중 도메인(https://~~~.com/)만 복사해서 Homepage URL에 넣기 > register application
> Client ID 복사 > firebase에서 클라이언트 ID에 붙여넣기 > 깃허브 Generate a new client secret 로그인 해서 > firebase의 클라이언트 보안 비밀번호를 붙여넣고 저장 > VScode components에 GithubBtn.tsx 만들기
> github.com/logos 크롬으로 접속하여 깃허브 공식 로고 다운로드



===================================


firebase 인증하기 순서 정리
1. Firebase login
2. Project 만들기 > sns-flatform01
- google Analytics 사용설정 x
3. Project 생성 > 좌측 메뉴 > Build > Authentication > 시작하기
- 사용자의 이메일/비밀번호 세팅
4. 로그인 방법 탭 > 새 공급업체 추가 > GitHub
5. github 개발자 페이지
> github.com/settings/developers 접속
> OAuth Apps > New OAuth App 버튼 클릭
> name : sns-flatform01
> URL : firebase 로그인방법에서 github선택해서 나온 콜백 url의 path 전까지
> Callback URL 활용 > Register Application
> SID 코드를 발급 > Firebase 등록


* Firebase >
- User Info 생성
- Authentication 인증
- 외부 계정 인증
- DB 물리적 공간 생성
- 각각의 창고 = storage

------------------------------------

html, css는 fontaewsome : 다양한 아이콘, 유료, script 설치
React :
- fontawesome

1) npm install 설치
npm i --save @fortawesome/fontawesome-svg-core
npm install --save @fortawesome/free-solid-svg-icons
npm install --save @fortawesome/react-fontawesome

2) index.html


- heroicons.dev

---------------------------------------------

Firebase Storage : 한 달밖에 안됨, 5G 제공
1) FireStore Database 공간 생성
firebase > 빌드 > Storage > 시작하기 > 테스트모드에서 시작 >  asia-northeast3 선택
firebase > 빌드 > firestore database > 데이터베이스 만들기 버튼 클릭

※ 만약 데이터베이스 만들기 버튼이 여기서 안 떴을 때!!! Google.Console이동 > 약관 동의 > 
default 클릭 > 네이티브 모드로 전환 > 모드 전환 > 확인 > 400에러 > firebase database 새로고침 > 조금 시간 지나고 새로고침

2)
DB 이름 = 컬렉션 
+ 컬렉션 시작 > ID = sns로 입력(컬렉션 이름)하고 다음 > 문서ID : 자동ID 클릭(식별하기 위한 목적의 ID)

각각의독립적인 필드로 구성
ex) A필드(사용자가 작성한 컨텐츠 내용)
B필드(해당 컨텐츠를 작성한 사용자의 정보)
C필드(해당 컨텐츠 포스팅 후 받은 좋아요 수)

컬렉션이 table, 필드는 column명인거 같음


------------------------------------------

1. Authentication
- 회원가입 기능 구현
- 신규 생성된 회원정보 > 로그인 기능 구현
- SNS 계정 연동> 로그인 기능 구현

2. Firestore Database
- UI 화면을 통해서 사용자로부터 입력받은 data 활용 > 컬렉션 > 문서 > 필드
컬렉션 : 데이터가 저장될 상위 카테고리
문서 : 새로운 컨텐츠가 저장(업로드) 될 때마다 신규로 생성되는 카테고리 (*고유한 ID 값으로 생성)
필드 : 컨텐츠가 신규로 생성 필요한 세부정보를 담고있음(*컨텐츠가 생성된 날짜정보, 컨텐츠 내용, 해당 컨텐츠의 고유ID, 컨텐츠를 생성한 사용자의 정보)

3. Storage
- 이미지 혹은 동영상 물리적으로 업로드
- 컬렉션 : 이미지 혹은 동영상 컨텐츠가 저장될 상위 카테고리
- 문서 : 새로운 이미지 혹은 동영상 컨텐츠가 저장(업로드)될 때마다 신규로 생성되는 카테고리
- 필드 : 업로드한 이미지 혹은 동영상 세부 address 정보가 담긴 필드






