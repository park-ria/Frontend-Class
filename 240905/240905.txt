2. Componenet

3. Props

4.jsx

5. hooks
- useState() : state 변수값 관리, 제어
- useRef() : VD에서 특정 노드 요소를 찾아서 제어
- useEffect() : 리액트 텀포넌트 라이프 사이클 제어
  useEffect(() => {
    console.log("count 업데이트 : ", count);
  }, [count]);
  // 반드시 두개 인자값 받음
  // count라는 값이 변화가 되면 앞에 콜백함수를 실행해라


>탄생(*최초의 컴포넌트) > 성장(*컴포넌트 업데이트) > 죽음(*더이상 컴포넌트 사용 X) 

가상 돔에 원본데이터를 복제하려면 원본 데이터를 파싱해야함 파싱하면서 실행이 되면서 업데이트 됨
가상 돔에 복제하면서 콘솔들이 실행되고 찍힘

6. state

1) 버튼을 클릭하게 된다면, 해당 버튼에 입력된 값을 찾아온다

2) 찾아온 해당값을 현재 카운트 영역으로 출력해준다

> state > useState
> state를 관리하는 요소 > 최상위 부모

* 리액트 > 코드를 작성!! > VD 복제 > 코드를 입력 => UI 출력

마운트: 브라우저가 최초로 데이터 읽을 때
렌더링 : 값이 업데이트 될 때

(1)useEffect 기능
  1) 기본 기능 : 의존성 배열에 입력된 state의 값이 업데이트가 되면 콜백함수를 실행시킨다.
      ex) 넷플릭스 사이트를 만들었는데, 최초에는 API 데이터를 굳이 가져올 필요가 없는 상황 => 영화 썸네일을 클릭할 때에만 모달페이지를 만들면서 동시에 영화 API 데이터를 찾아와야하는 상황
  	useEffect(() => {
    	   if (!didMountRef.current) didMountRef.current = true;
    	   else console.log("컴포넌트 업데이트!");
  	});

  	useEffect(() => {
    	   console.log("컴포넌트 마운트!");
 	 }, []);

  2) 컴포넌트가 실행되자마자 무조건 실행기능
      > useEffect에 의존성 배열이 존재하지 않는 경우, 컴포넌트 안에 있는 값을 렌더링 할 때마다 무조건 콜백함수를 실행시킴

     ex) 넷플릭스 사이트를 만들었는데, 상단 슬라이드 => AIP 데이터를 활용해서 무조건 생성상황
  	useEffect(() => {
    	  console.log("컴포넌트 업데이트");
 	 });
             // 의존성 배열에 어떤한 값도 정의되지 않으면 뭘 하던지 간에 무조건 실행됨

3) 컴포넌트 안에 있는 요소들을 렌더링할 때만 실행, 최초에 컴포넌트가 마운트 되는 시점에서 실행시키고 싶지 않은 경우
     > 비동기처리 방식으로 A데이터 먼저 실행 => B 데이터 나중에 실행
     > useRef(false)를 활용해서 사용

 	 const didMountRef = useRef(false);

  	useEffect(() => {
   	    if (!didMountRef.current) didMountRef.current = true;
    	   else console.log("컴포넌트 업데이트!");
 	 });

4) 컴포넌트가 마운트 되는 시점에 딱 1번만 실행!!!
     > useEffect() 함수 내 의존성 배열 안에 있는 값이 존재하지 않는 경우 => 빈 배열은 존재하는 경우
  	useEffect(() => {
    	   console.log("컴포넌트 마운트!");
 	 }, []);

5) 컴포넌트가 언마운트 되는 경우!!
     > 기존에 컴포넌트가 마운트된 이후에 실행하고 있던 어떤 작업이 종료가 되었다는 것을 의미!
     > 자연스럽게 언마운트의 단계 // 의도적으로 언마운트의 단계
     > 기존 작업을 종료시키는 명칭 : 클린업
     > 리액트에서는 컴포넌트의 생애주기
        ㄱ. 브라우저가 컴포넌트 파싱하는 순간 : 마운트
        ㄴ. UI 내 state 상태변화가 업데이트 : 렌더링
        ㄷ. 컴포넌트가 언마운트가 되려면 : 클린업
        ㄹ. 더이상 컴포넌트를 사용하지 않는 순간 : 언마운트

  useEffect(() => {
    const intervalID = setInterval(() => {
      console.log("깜빡");
    }, 1000);

    return () => {
      console.log("클린업!");
      clearInterval(intervalID);
    };
  });


----------------------------------------------

단락회로평가 => JSX 문업 : 문장 X, 식 O
AND 단락평가 => 좌항이 참인 경우에만 우항을 실행해라
     <section>
        <Viewer count={count} />
        {count % 2 === 0 && <Even />}
      </section>

---------------------------------------------

크롬 > 확장프로그램 > 크롬 웹스토어 > React Developer Tools > 확작프로그램 추가

리액트 사이트면 빨갛게 불이들어오고 개발자 도구에 component가 생김

--------------------------------------------

App Component : 최상단 부모
	Header Component : 오늘이 며칠인지 알려주는 컴포넌트 역할
	Editor Component : 사용자가 오늘 해야 할 일을 입력할 수 있도록 도와주는 컴포넌트 역할
	List Componenet : Editor 컴포넌트를 통해서 사용자가 입력한 오늘 할 일이 출력되어지는 목록 공간 역할
  		- ListItem Component : List 컴포넌트의 자식 컴포넌트로 사용

--------------------------------------------

리액트 공부 방법
1. 각각의 개념 정의 확실하게
2. 큰 요소들 => 리액트 작동되는 원리 이해


*hook
useState() : 
- 컴포넌트를 만들면 거의 대부분의 확률의 무조건 state 값을 관리해야하는 상황 발생
- 사용자의 이벤트가 거의 대부분 발생
- 가상돔 -> 일반 변수를 사용하지 않고 state를 관리해야 함

useRef() : 
- 특정 노드를 제어하고자 할 때 씀(주로 form요소에서 많이 씀)
- 컴포넌트 그 자체를 제어할 때(boolean을 사용해서)
 	 const didMountRef = useRef(false);

  	useEffect(() => {
   	    if (!didMountRef.current) didMountRef.current = true;
    	   else console.log("컴포넌트 업데이트!");
 	 });

useEffect() : 
- 컴포넌트가 마운트가 되고 렌더링이 되고 언마운트가 되고 어떠한 컴포넌트의 상황과 단계에 따라서 무언가를 실행시켜줘야 할 때
- 컴포넌트가 어떤 단계 및 상황에 도착했을 때에 무언가를 실행시켜야 할 때



=============================================================


fullpage : https://alvarotrigo.com/fullPage/ko/ -> 설명서 -> CDN 사용 가능(https://cdnjs.com/libraries/fullPage.js)
-> 유료라서 version 3.1.0 서택 




