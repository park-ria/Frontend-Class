node.js : 자바스크립트를 기반으로 탄생한 플랫폼(실행환경)

구글 크롬 웹 브라우저 > V8 검색엔진 > JS 빠르고 & 효율적 스캐닝 & 실행

npm = Node Package Manager

터미널
> node 노드로 접속
> .exit 노드 나갈 때
> cls 터미널 클리어

Node = Server로 인식

https://www.npmjs.com/
express 입력

github에 repository 생성
git init
git remote add origin https://github.com/park-ria/node-reloaded.git
git remote -v
npm init
package name: (nodeproject)나오면 엔터
version: (1.0.0)나오면 엔터
descprition: watch videos.
entry point: (index.js)나오면 엔터
test command: 엔터
git repository: https://github.com/park-ria/node-reloaded.git
keywords: 엔터
author: Ria
license: (ISC)MIT
Is this OK? (yes) y

index.js파일을 생성하고
console.log("Hello World!");
하고 터미널에서 node index.js하면 실행 됨

package.json에서
"scripts"에서 test 지우고 "win": "node index.js" 입력
  "scripts": {
    "win": "node index.js"
  },

터미널에서 npm run win입력하면 뜸

npm install express
하면 node 서버를 만드는데 필요한 express 설치

바벨 설치
> npm install --save-dev @babel/preset-react
> npm install --save-dev @babel/core @babel/cli @babel/preset-env
> npm install @babel/core @babel/node --save-dev

babel.config.json이라는 파일 생성
{
  "presets": ["@babel/preset-env"]
}

package.json에
  "scripts": {
    "dev": "babel-node index.js"
  }
로 수정

index.js
const express = require("express");

const app = express();

console.log("Hi!");

> npm run dev
> npm i nodemon --save-dev

미들웨어 전용 라이브러리
> npm i morgan

pakage.json에
  "scripts": {
    "dev": "nodemon --exec babel-node src/index.js"
  },
로 수정

> npm i pug

------------------------------

license 종류
BSD : Berkeley Software Distibution
- 어떤 npm 혹은 라이브러리들을 사용할 때 사용, 수정, 배포는 자유롭게 하되, 재배포 시에는 원저작자의 동의 및 오픈

GPL : General Public License
- BSD 라이센스 타입과 거의 동일하나, 재배포를 할 시에도 반드시 원저작자의 이름

MIT : Massachusetts Institute of Technology
- 엄격! 수정, 배포, 편집 허용 그러나 원저작자의 경제 활동 및 표현 제약 -> 즉각 정지 가능

------------------------------

* 노드 명령어!!!
ls : git-bash 터미널 > 현재 node 프로젝트 폴더 내 생성된 파일 목록 출력
cls : 터미널 내 결과값을 clear


------------------------------

https://babeljs.io/docs
babel : ES6 이전 자바스크립트 문법과 이후 문법을 호환시켜 줌

https://expressjs.com/en/guide/routing.html
res.end() : client의 요청이 발생된 이후 서버가 어떤 조치를 한 다음 종결을 짓고자 할 때
res.send() : client가 도착한 해당 페이지에 어떤 값을 전달하고자 할 때

콜백함수 > req, res, next
- next() : 미들웨어 함수가 실행 후 파이널 웨어 함수에게 실행권을 넘길 때 사용함수

-------------------------------

1. Node.js 설치

2. npm

3. npm init => package.json
 
4. babel => JS 신문법 & 구문법 => 통일해서 최신문법 컴파일링

5. nodeMone => 터미널 실시간으로 코드 잘 작동하는지 모니터링

6. express 서버가 잘 구현되도록 하는 라이브러리

7. listen() => 몇 번 포트, 어떤 기능 실행
get() => 어떤 경로, 어떤 기능 실행
: 미들웨어 함수, 파이널 웨어 함수
use() => 미들웨어 함수를 따로  뺄 수 있음

8. 파이널웨어 함수:
end() : 클라이언트가 요청한 페이지에서 종결
send() : 클라이언트가 요청한 페이지에 어떤 값을 전달


---------------------------------

Server 구현

Node.js

Babel : JS 최신언어 통일
Nodemon : Node 서버를 활용한 모니터링
Morgan : client의 접속 현황 체크
Pug : html 템플릿 양식을 보다 효율적으로 작성 도와주는 역할

Express

Restful API
- get
- post

Global Router
- middelware function
- finalware function

Page Routing

Action > Controller
- end
-send
- render

MVP 활용 프로젝트 제작
Minimum Viable Product : 어떤 웹 사이트 및 서비스를 구현하는데 있어서 중요한 기능이라고 판단되는 요소들을 빠른 시간 내 간단하게 구현한 후 테스트 형식으로 실행하는 방법

----------------------------

/Dynamic Parameter => Absolute URL
Dynamic Prameter => Relative URL

a(href=`/edit`)
a 태그에 /를 넣어서 하면 절대경로로 바뀜
http://localhost:4000/edit

a(href=`${video.id}/edit`)
a 태그에 맨 앞에 /를 넣지 않으면 상대경로로 바뀜
http://localhost:4000/videos/3/edit

-----------------------------

변수 값만 넣을때는 #{} 문자열과 같이 쓰고싶어서 템플릿 리터럴을 쓸 때는 ${}을 써야 함

------------------------------

MVP
Minimum Viable Product : 
> UI/UX + F/E + B/E => 최종적인 제품 개발

------------------------------
MongoDB
- json 형태 DB
- 문법 => Node.js X => mongoose 필요

1) Mongodb 공홈 > 인스톨러 설치(설치가 복잡) or chocolatey 설치(운영체제에서 외부 프로그램을 설치할 때 쉽게 설치 할 수 있도록 도와주는 shell 


몽구스(Mongoose)는 몽고DB와 Express.js 웹 애플리케이션 프레임워크 간 연결을 생성하는 자바스크립트 객체 지향 프로그래밍 라이브러리이다.

행, 열 기반 구조x
json 구조

몽고db 설치
https://www.mongodb.com/try/download/community

초콜렛티 : 윈도우에서만 사용하는 터미널 방식
https://chocolatey.org/

- chocolatey 설치(윈도우에서만) :
   https://community.chocolatey.org/courses/installation/installing#powershell
   powershell 관리자 모드에서 
   > Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

* 여기서 설치가 안될 때 수동 설치하는 방법!
   1)chocolatey > install
      (https://chocolatey.org/install?_gl=1*wirdq0*_ga*MTYxMjMxNDQ2Mi4xNzMyMjQ4NjQ0*_ga_0WDD29GGN2*MTczMjQ5ODk3Ni4zLjEuMTczMjQ5ODk3Ny4wLjAuMA..#generic)
       > generic > download > 확장자 .zip으로 변경 > 압축풀기 > tools > 경로 복사 
       > powershell 관리자 모드에서 > C:\Users\EZEN\Downloads\chocolatey.2.4.0\tools\chocolateyInstall.ps1
   2) 설치 확인
      > choco

- chocolatey 활용한 mongoDB:
   > choco install mongodb --pre
   > All 선택

- cmd를 활용해서 mongoDB
   > choco install mongodb-shell
   > All 선택

- GUI를 활용해서 mongoDB(보통 위의 cmd 설치하므로 안해도 됨)
   > choco install mongodb-compass

- 시스템 환경 변수 설정(mongoDB > 경로를 로컬컴퓨터)
   > 윈도우 시스템 환경 변수 편집 검색 후 열기 > 환경변수> 위에꺼 path > 편집 > 새로만들기> 찾아보기 > c드라이브 > programfiles> mongobbd > server>8.0> bin > 확인
   > powershell 관리자 모드 > mongosh 로 mongodb shell 접속 > test 나오면 설치 완료
   > show dbs > admin, config, local 나옴 이건 컴퓨터 기본 설정이기때문에 건들면 안됨!
   > show users 로 계정 확인

- mogoose(https://mongoosejs.com/docs/)
   몽고db와 express 언어가 서로 다르기 때문에 mongoose를 통해서 소통되도록 함
   > npm install mongoose --save
   > package.json에서 mongoose 설치 확인


------------------------------

db.js 만들고
server.js에 db를 import

init.js
video.js 만들고
package.json에서 
"scripts": {
    "dev": "nodemon --exec babel-node src/init.js"
  },
수정
